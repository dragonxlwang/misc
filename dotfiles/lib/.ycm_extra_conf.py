# vim:set ts=2 sts=2 sw=2 expandtab:
import os
import ycm_core

flags_fbcode = [
    '-DFBCODE_OPT_BUILD',
    '-DNDEBUG',
    # '-std=gnu++0x',
    '-std=c++1y',
    '-x',
    'c++',
    '-nostdinc',
    '-I',
    '.',
    '-Wall',
    '-Winvalid-pch',
    '-Wno-deprecated',
    '-Wno-sign-compare',
    '-Wno-unused-variable',
    '-Woverloaded-virtual',
    # '-I',
    # 'buck-out/dev/gen/ccif/string/__default_headers__#default,headers.hmap',
    # '-I',
    # 'buck-out/dev/gen/ccif/string/ccif_string-cpp2#default,headers,veef279d.hmap',
]

compilation_database_folder = os.path.expanduser('~/fbcode')

if os.path.exists(compilation_database_folder):
    database = ycm_core.CompilationDatabase(compilation_database_folder)
else:
    database = None

SOURCE_EXTENSIONS = ['.cpp', '.cxx', '.cc', '.c', '.m', '.mm', '.cu']


def DirectoryOfThisScript():
    return os.path.dirname(os.path.abspath(__file__))


def MakeRelativePathsInFlagsAbsolute(flags, working_directory):
    # flags = [flag for flag in flags if ('wrappers' not in flag)]
    if not working_directory:
        return list(flags)
    new_flags = []
    make_next_absolute = False
    path_flags = ['-isystem', '-I', '-iquote', '--sysroot=']
    for flag in flags:
        new_flag = None
        # new_flag = flag

        if make_next_absolute:
            make_next_absolute = False
            if not flag.startswith('/'):
                new_flag = os.path.join(working_directory, flag)

        for path_flag in path_flags:
            if flag == path_flag:
                new_flag = flag
                make_next_absolute = True
                break

            if flag.startswith(path_flag):
                path = flag[len(path_flag):]
                new_flag = path_flag + os.path.join(working_directory, path)
                break

        if new_flag:
            new_flags.append(new_flag)
    return new_flags


def IsHeaderFile(filename):
    extension = os.path.splitext(filename)[1]
    return extension in ['.h', '.hxx', '.hpp', '.hh']


def GetAlternativeFileAtCurDir(filename):
    if database:
        directory = os.path.split(filename)[0]
        for f in os.listdir(directory):
            print f
            if f.endswith(".cpp"):
                filename = os.path.join(directory, f)
                print filename
                info = database.GetCompilationInfoForFile(filename)
                if info and len(info.compiler_flags_) > 0:
                    return info
    return None


def GetAlternativeFileAtPeerDirectories(filename):
    if database:
        curdir = os.path.split(filename)[0]
        for up in ['..', '../..']:
            directory = os.path.normpath(os.path.join(curdir, up))
            for (root, dirs, files) in os.walk(directory):
                for f in files:
                    if f.endswith(".cpp"):
                        filename = os.path.join(root, f)
                        print filename
                        info = database.GetCompilationInfoForFile(filename)
                        if info and len(info.compiler_flags_) > 0:
                            return info
    return None


def GetCompilationInfoForFile(filename):
    # The compilation_commands.json file generated by CMake does not have entries
    # for header files. So we do our best by asking the db for flags for a
    # corresponding source file, if any. If one exists, the flags for that file
    # should be good enough.
    if IsHeaderFile(filename):
        basename = os.path.splitext(filename)[0]
        for extension in SOURCE_EXTENSIONS:
            replacement_file = basename + extension
            if os.path.exists(replacement_file):
                compilation_info = database.GetCompilationInfoForFile(
                    replacement_file
                )
                if compilation_info.compiler_flags_:
                    return compilation_info
        return None
    return database.GetCompilationInfoForFile(filename)


def FlagsForFile(filename, **kwargs):
    if database:
        # Bear in mind that compilation_info.compiler_flags_ does NOT return a
        # python list, but a "list-like" StringVec object
        compilation_info = GetCompilationInfoForFile(filename)
        if not compilation_info or len(compilation_info.compiler_flags_) == 0:
            compilation_info = GetAlternativeFileAtCurDir(filename)
            if not compilation_info or len(
                compilation_info.compiler_flags_
            ) == 0:
                compilation_info = GetAlternativeFileAtPeerDirectories(
                    filename
                )
                if not compilation_info or len(
                    compilation_info.compiler_flags_
                ) == 0:
                    relative_to = DirectoryOfThisScript()
                    final_flags = MakeRelativePathsInFlagsAbsolute(
                        flags_fbcode, relative_to
                    )
                    return {
                        'flags': flags_fbcode + final_flags,
                        'do_cache': True
                    }

        final_flags = MakeRelativePathsInFlagsAbsolute(
            compilation_info.compiler_flags_,
            compilation_info.compiler_working_dir_
        )

        # NOTE: This is just for YouCompleteMe; it's highly likely that your project
        # does NOT need to remove the stdlib flag. DO NOT USE THIS IN YOUR
        # ycm_extra_conf IF YOU'RE NOT 100% SURE YOU NEED IT.
        try:
            # final_flags.remove( '-stdlib=libc++' )
            final_flags.remove('-Werror')
        except ValueError:
            pass
    else:
        relative_to = DirectoryOfThisScript()
        final_flags = MakeRelativePathsInFlagsAbsolute(
            flags_fbcode, relative_to
        )

    return {'flags': flags_fbcode + final_flags, 'do_cache': True}
