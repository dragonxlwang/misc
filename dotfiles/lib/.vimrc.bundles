" ================ Vundle Config =====================
"" https://github.com/VundleVim/Vundle.vim
" git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
" vim +PluginInstall +qall
" turn filetype detection off and, even if it's not strictly
" necessary, disable loading of indent scripts and filetype plugins
filetype off
filetype plugin indent off
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" ============================================================================="
"            _______  _______   __  .___________. ______   .______             "
"           |   ____||       \ |  | |           |/  __  \  |   _  \            "
"           |  |__   |  .--.  ||  | `---|  |----|  |  |  | |  |_)  |           "
"           |   __|  |  |  |  ||  |     |  |    |  |  |  | |      /            "
"           |  |____ |  '--'  ||  |     |  |    |  `--'  | |  |\  \----.       "
"           |_______||_______/ |__|     |__|     \______/  | _| `._____|       "
" ============================================================================="
Plugin 'moll/vim-bbye'
" Close the current buffer without closing windows
noremap <leader>bd :Bdelete<cr>

Plugin 'vim-scripts/a.vim'
" Plugin 'vim-scripts/YankRing.vim'
" let g:yankring_replace_n_pkey = '<leader><leader>p'
" let g:yankring_replace_n_nkey = '<leader><leader>n'
" nnoremap <leader>yr :YRShow<cr>
" let g:yankring_history_dir = '~/.vim'

Plugin 'ConradIrwin/vim-bracketed-paste'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-abolish'
Plugin 'jiangmiao/auto-pairs'
Plugin 'godlygeek/tabular' " cuke tables: https://gist.github.com/tpope/287147
" Plugin 'dhruvasagar/vim-table-mode'
Plugin 'dragonxlwang/vim-better-search'
Plugin 'elzr/vim-json'
Plugin 'yssl/QFEnter'
let g:qfenter_keymap = {}
let g:qfenter_keymap.vopen = ['<C-v>']
let g:qfenter_keymap.hopen = ['<C-CR>', '<C-s>', '<C-x>']
let g:qfenter_keymap.topen = ['<C-t>']
Plugin 'easymotion/vim-easymotion'
" Disable default mappings
let g:EasyMotion_do_mapping = 0
" Turn on case insensitive feature
let g:EasyMotion_smartcase = 1
" JK motions: Line motions
map f <Plug>(easymotion-bd-jk)
nmap F <Plug>(easymotion-overwin-line)

" ============================================================================="
"         ____    ____  __       _______. __    __       ___       __          "
"         \   \  /   / |  |     /       ||  |  |  |     /   \     |  |         "
"          \   \/   /  |  |    |   (----`|  |  |  |    /  ^  \    |  |         "
"           \      /   |  |     \   \    |  |  |  |   /  /_\  \   |  |         "
"            \    /    |  | .----)   |   |  `--'  |  /  _____  \  |  `----.    "
"             \__/     |__| |_______/     \______/  /__/     \__\ |_______|    "
" ============================================================================="
Plugin 'vim-airline/vim-airline'
Plugin 'dragonxlwang/vim-airline-themes'
let g:airline#extensions#tagbar#enabled = 0
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#hunks#enabled = 1
let g:airline#extensions#ycm#enabled = 1
let g:airline#extensions#tabline#tab_nr_type = 2 " splits and tab number
let g:airline#extensions#tabline#show_splits = 0
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline_theme = 'molokai'
let g:airline_section_c =
      \"%{bufnr('%')}: ".
      \"%<%f%m %#__accent_red#".
      \"%{airline#util#wrap(airline#parts#readonly(),0)}%#__restore__#"
" https://gist.github.com/kevinis/c788f85a654b2d7581d8
" https://gist.github.com/baopham/1838072
set guifont=Monaco\ for\ Powerline:h12
let g:airline_powerline_fonts = 1

Plugin 'Yggdroot/indentLine'
let g:indentLine_char = '┊'       " | ¦ ┆ │ ┊
" Plugin 'nathanaelkane/vim-indent-guides'
" let g:indent_guides_enable_on_vim_startup = 1
" let g:indent_guides_guide_size = 1

" Plugin 'severin-lemaignan/vim-minimap'
" let g:minimap_highlight='String'
" let g:minimap_show='<leader>ms'
" let g:minimap_update='<leader>mu'
" let g:minimap_close='<leader>mc'
" let g:minimap_toggle='<leader>mm'

" Plugin 'flazz/vim-colorschemes'
Plugin 'dragonxlwang/molokai'
" Disable gitgutter since it's incompatible with mhinz/vim-signify
" Plugin 'airblade/vim-gitgutter'
Plugin 'mhinz/vim-signify'
Plugin 'jeetsukumaran/vim-buffergator'
nnoremap <leader>bb :BuffergatorToggle<CR>
" Plugin 'vim-scripts/ScrollColors'

" ============================================================================="
"            __       __  .__   __. .___________._______ .______               "
"           |  |     |  | |  \ |  | |           |   ____||   _  \              "
"           |  |     |  | |   \|  | `---|  |----|  |__   |  |_)  |             "
"           |  |     |  | |  . `  |     |  |    |   __|  |      /              "
"           |  `----.|  | |  |\   |     |  |    |  |____ |  |\  \----.         "
"           |_______||__| |__| \__|     |__|    |_______|| _| `._____|         "
" ============================================================================="
Plugin 'nvie/vim-flake8'
let g:flake8_show_in_file=1
let g:flake8_show_in_gutter=1
augroup Flake8AutoGroup
  autocmd!
  autocmd FileType python map <buffer> <leader>jj :call Flake8()<CR>
  autocmd FileType python map <buffer> <leader>jc
        \ :call flake8#Flake8UnplaceMarkers()<CR>
augroup END

Plugin 'kchmck/vim-coffee-script'

Plugin 'ntpeters/vim-better-whitespace'
" turn on by default for all filetypes
augroup StripWhiteSpaceAutoGroup
  autocmd!
  autocmd BufWritePre * StripWhitespace
augroup END

" export LC_ALL=en_US.UTF-8
" export LANG=en_US.UTF-8
" cd ~/.vim/bundle/YouCompleteMe
" ./install.py --clang-completer
" cd ~/.vim/bundle/color_coded
" mkdir build && cd build
" cmake ..
" make && make install # Compiling with GCC is preferred, ironically
" # Clang works on OS X, but has mixed success on Linux and the BSDs
" # Cleanup afterward; frees several hundred megabytes
" make clean && make clean_clang
Plugin 'Valloric/YouCompleteMe' " <leader>d: diagnostic msg on current line
let g:ycm_confirm_extra_conf=0
let g:ycm_server_keep_logfiles = 1
let g:ycm_server_log_level = 'debug'
let g:ycm_global_ycm_extra_conf="~/.vim/.ycm_extra_conf.py"
let g:ycm_min_num_identifier_candidate_chars = 4
if system("hostname -s") =~ 'dev'
  " Plugin 'YouCompleteMe', {'pinned': 1}
  let g:ycm_server_python_interpreter=
      \'/usr/local/fbcode/bin/python3.6'
else
  let g:ycm_server_python_interpreter='/usr/local/bin/python'
endif
" Plugin 'oblitum/YouCompleteMe'
" let g:ycm_path_to_python_interpreter='/usr/local/bin/python'
" let g:ycm_enable_diagnostic_signs = 0
" let g:ycm_error_symbol = 'x'
" let g:ycm_warning_symbol = '!'
" nnoremap <leader>pg :YcmCompleter GoToDefinitionElseDeclaration<CR>
" nnoremap <leader>pd :YcmCompleter GoToDefinition<CR>
" nnoremap <leader>pc :YcmCompleter GoToDeclaration<CR>

Plugin 'Valloric/ListToggle'
" Plugin 'jeaye/color_coded'        " not working right now
Plugin 'rdnetto/YCM-Generator'
" Track the engine.
Plugin 'SirVer/ultisnips'
" Snippets are separated from the engine. Add this if you want them:
Plugin 'honza/vim-snippets'

let g:ycm_extra_conf_globlist = ['~/workspace/*','~/Dropbox/workspace/*']
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_always_populate_location_list = 1
let g:ycm_complete_in_comments = 1
let g:ycm_goto_buffer_command = 'horizontal-split'
let g:lt_location_list_toggle_map = '<leader>ll' " toggle location list
let g:lt_quickfix_list_toggle_map = '<leader>qf' " toggle quickfix list
noremap <Leader>jd :YcmCompleter GoTo<CR>
noremap <leader>jt :YcmCompleter GetType<CR>
noremap <leader>jm :YcmCompleter GetDoc<CR>
noremap <leader>jf :YcmCompleter GoToReferences<CR>
noremap <leader>jj :YcmForceCompileAndDiagnostics<CR> :YcmDiags<CR>
noremap <Leader>ff :YcmCompleter FixIt<CR>
let g:ycm_filetype_blacklist = {
      \ 'tagbar' : 1,
      \ 'qf' : 1,
      \ 'notes' : 1,
      \ 'unite' : 1,
      \ 'text' : 1,
      \ 'vimwiki' : 1,
      \ 'pandoc' : 1,
      \ 'infolog' : 1,
      \ 'mail' : 1
      \} " \ 'markdown' : 1,
" Trigger configuration. Do not use <tab> if you use Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
" =============================================
" Plugin 'scrooloose/syntastic'
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*
" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0

Plugin 'justinmk/vim-syntax-extra'  " temporal solution
Plugin 'dragonxlwang/python-syntax'
Plugin 'solarnz/thrift.vim'

Plugin 'Chiel92/vim-autoformat'
if !empty(glob("~/llvm/build/bin/clang-format"))
  let g:formatdef_my_custom_clang =
        \"'~/llvm/build/bin/clang-format -lines='.a:firstline.':'.a:lastline.' -style=google'"
else
  let g:formatdef_my_custom_clang =
        \"'clang-format -lines='.a:firstline.':'.a:lastline.' --assume-filename=\"'.expand('%:p').'\" -style=file -fallback-style=Google'"
endif
let g:formatters_cpp = ['my_custom_clang']
let g:formatters_c = ['my_custom_clang']
let g:formatdef_yapf =
  \"'yapf --style=\"{based_on_style:facebook,indent_width:4,column_limit:80}\" -l '.a:firstline.'-'.a:lastline"
let g:formatdef_black = "'isort - | black -q - '"
let g:formatdef_buck="'~/fbsource/tools/third-party/buildifier/run_buildifier.py'"
let g:formatdef_thrift="'~/misc/scripts/./thrift_formatter.sh'"
let g:formatters_python=['black', 'yapf','autopep8']
let g:formatters_cconf=['black', 'yapf','autopep8']
let g:formatters_mcconf=['black', 'yapf','autopep8']
let g:formatters_cinc=['black', 'yapf','autopep8']
let g:formatters_yapf=['yapf', 'autopep8']
let g:formatdef_hackfmt="'hackfmt'"
let g:formatters_php =['hackfmt']
let g:formatters_TARGETS=['buck']
let g:formatters_thrift=['thrift']
nnoremap <leader>w :Autoformat \| :w!<CR>
vnoremap <leader>w :Autoformat \| :w!<CR>
noremap <leader>W
  \ :Autoformat yapf \| :w! \|
  \ :setl textwidth=80 \| :setl colorcolumn=80 <CR>
" let g:formatter_yapf_style = 'facebook'
" let g:formatters_python = ['yapf']
" let auto_format_type_list = ['c', 'cpp', 'python']
" autocmd BufWritePre * if index(auto_format_type_list, &ft) >= 0 |
"       \ exe "Autoformat" | endif
" Fast save

" ============================================================================="
"                      _______  __   __       _______                          "
"                     |   ____||  | |  |     |   ____|                         "
"                     |  |__   |  | |  |     |  |__                            "
"                     |   __|  |  | |  |     |   __|                           "
"                     |  |     |  | |  `----.|  |____                          "
"                     |__|     |__| |_______||_______|                         "
" ============================================================================="
Plugin 'scrooloose/nerdtree'
augroup NERDTreeAutoGroup
  autocmd!
  autocmd StdinReadPre * let s:std_in=1
  autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
  " \ | exe "normal! \<C-w>\<C-w>" | endif
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree")
        \ && b:NERDTree.isTabTree()) | q | endif
augroup END
let g:NERDTreeShowHidden = 1
let g:NERDTreeSplitFromPreviousWindow = 1
let NERDTreeIgnore = ['\.pyc$', '\.swp$']
let g:NERDTreeMapToggleFilters='z'
" <CR> and <C-m> is the same so use C-b for open in nerdtree
let g:NERDTreeMapCustomOpen='<C-b>'
nnoremap <leader>nn :NERDTreeToggle<CR>
nnoremap <leader>n. :NERDTreeFind<cr>
nnoremap <leader>no :NERDTree<space>
nnoremap <leader>nf :NERDTreeFocus<CR>
Plugin 'Xuyuanp/nerdtree-git-plugin'

Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'tacahiroy/ctrlp-funky'
let g:ctrlp_show_hidden = 1
" let g:ctrlp_cmd = 'CtrlPLastMode'
let g:ctrlp_cmd = 'CtrlPMRU'
let g:ctrlp_extensions = ['line', 'dir', 'buffertag', 'tag', 'mixed']
" let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:10,results:25'
let g:ctrlp_custom_ignore = '(node_modules|_build|buck-out)'
let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_root = ''
let g:ctrlp_mruf_max = 5000
nnoremap <Leader>fu :CtrlPFunky<Cr>
" narrow the list down with a word under cursor
nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>

Plugin 'junegunn/fzf'
Plugin 'junegunn/fzf.vim'

let g:fbdirs = 'sigrid,fblearner,caffe2,experimental/xlwang,search,unicorn,nlp_tools'
let g:cconf="unicorn,nlp_tools"
let g:fzf_layout= { 'down': '~20%' }
command! FZFfbcode call fzf#run(fzf#wrap(
    \ {'source':  'find '.
    \ '~/fbcode/{'. g:fbdirs. '} '.
    \ '~/configerator/source/{'.  g:cconf. '} '.
    \ '-type f',
    \ 'options': '--prompt "fbcode> "'  }))
command! FZFfbcode2 call fzf#run(fzf#wrap(
    \ {'source':  'find '. '~/fbcode2/{'. g:fbdirs. '} -type f',
    \  'options': '--prompt "fbcode2> "'  }))
command! FZFfbcode3 call fzf#run(fzf#wrap(
    \ {'source':  'find '. '~/fbcode3/{'. g:fbdirs. '} -type f',
    \  'options': '--prompt "fbcode3> "'  }))
command! FZFfullfbcode call fzf#run(fzf#wrap(
    \ {'source': 'find ~/fbcode/ -type f',
    \  'options': '--prompt "fbcode> "'  }))
command! FZFfullfbcode2 call fzf#run(fzf#wrap(
    \ {'source': 'find ~/fbcode2/ -type f',
    \  'options': '--prompt "fbcode2> "'  }))
command! FZFfullfbcode3 call fzf#run(fzf#wrap(
    \ {'source': 'find ~/fbcode3/ -type f',
    \  'options': '--prompt "fbcode3> "'  }))
function! FZFfbcodeFunc()
  let b:fbver = substitute(
        \system('~/misc/scripts/fb_repo_version.sh '.  resolve(expand('%:p'))),
        \"\n", "", "")
  let b:prompt = b:fbver. '> '
  call fzf#run(fzf#wrap(
    \ {'source': '~/misc/scripts/find_in_fb.sh '.  resolve(expand('%:p')),
    \  'options': '--prompt "'. b:prompt. '"'}))
endfunction
function! FZFCwdFunc()
  let b:prompt ='files> '
  call fzf#run(fzf#wrap(
    \ {'source': 'find '. getcwd(). " -type f -not -path '*/\.*'",
    \  'options': '--prompt "'. b:prompt. '"'}))
endfunction


command! FZFMru call fzf#run(fzf#wrap(
    \ {'source': reverse(GetOldFiles()),
    \  'options': '--prompt "hist> "'  }))
function! GetOldFiles()
  return extend(
  \ filter(reverse(copy(v:oldfiles)), "filereadable(expand(v:val)) && ".
  \        "v:val !~ 'fugitive:\\|__Tagbar__\\|NERD_tree\\|^/tmp/\\|.git/'"),
  \ filter(map(filter(range(1, bufnr('$')), 'buflisted(v:val)'),
  \        'bufname(v:val)'), '!empty(v:val)'))
endfunction
nnoremap <C-[> :call FZFfbcodeFunc()<CR>
nnoremap <C-[><c-[> :call FZFCwdFunc()<CR>
" nnoremap <C-]> :FZFMru<CR>
" nnoremap <C-]> :Lines<CR>
nnoremap <C-]> :CtrlPLine<CR>
nnoremap <C-]><C-]> :CtrlPBuffer<CR>
vnoremap <leader>rg
        \ :<CR>:let @a=@" \|
        \ :execute "normal! vgvy" \|
        \ :execute "Rg ". @"  \|
        \ let @"=@a <CR>
nnoremap <leader>rg :Rg <CR>
cnoreabbrev <expr> rg
      \ (getcmdtype() == ':' && getcmdline() =~ '^rg$')? 'Rg' : 'rg'

Plugin 'majutsushi/tagbar'
let g:tagbar_autofocus = 1
let g:tagbar_sort = 0
" nnoremap <leader>gg :TagbarToggle<CR>
nnoremap <leader>gg :TagbarOpen -j<CR>
nnoremap <leader>gc :TagbarClose<CR>
" nnoremap <leader>gg
"   \ <Esc>"zyiw:TagbarOpenAutoClose<CR>:exe "/".@z.""<CR><CR>:nohlsearch<CR>

Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-session'
let g:session_autoload="no"
let g:session_autosave="yes"
let g:session_command_aliases = 1
" nnoremap <leader>so :OpenSession
" nnoremap <leader>ss :SaveSession
" nnoremap <leader>sd :DeleteSession
" nnoremap <leader>sc :CloseSession

Plugin 'tpope/vim-eunuch'
Plugin 'tpope/vim-dispatch'
" Plugin 'tpope/vim-obsession'
" Plugin 'benmills/vimux'

" ============================================================================="
"                      _______  __  .___________.                              "
"                     /  _____||  | |           |                              "
"                    |  |  __  |  | `---|  |----`                              "
"                    |  | |_ | |  |     |  |                                   "
"                    |  |__| | |  |     |  |                                   "
"                     \______| |__|     |__|                                   "
" ============================================================================="
Plugin 'mattn/gist-vim'
Plugin 'mattn/webapi-vim'
Plugin 'tpope/vim-fugitive'
command! XGdiff exe "Gdiff" | wincmd p | wincmd x
nnoremap <leader>ww :exe "Autoformat" \| :Gwrite <CR>
nnoremap <leader>www :exe "Autoformat" \| w! \|
      \ silent exe "!git commit -v -a -m 'message'" \|
      \ silent exe "!git push"  \| redraw! <CR>
" Plugin 'jlfwong/vim-mercenary'
Plugin 'ludovicchabant/vim-lawrencium'
command! -nargs=? HgVertSplitDiff :call HgVsDiff(<f-args>)
cnoreabbrev <expr> hd
      \ (getcmdtype() == ':' && getcmdline() =~ '^hd$')? 'HgVertSplitDiff' : 'hd'
function! HgVsDiff(...)
  let l:ft = &filetype
  if a:0 == 0
    let l:rev = ".^"
  else
    let l:rev = a:1
  endif
  exec "Hgvdiff". l:rev
  " move to left (rev file)
  wincmd h
  exec "set filetype=". l:ft
  wincmd x
endfunction

" ============================================================================ "
"                __          ___   .___________. __________   ___              "
"               |  |        /   \  |           ||   ____\  \ /  /              "
"               |  |       /  ^  \ `---|  |----`|  |__   \  V  /               "
"               |  |      /  /_\  \    |  |     |   __|   >   <                "
"               |  `----./  _____  \   |  |     |  |____ /  .  \               "
"               |_______/__/     \__\  |__|     |_______/__/ \__\              "
" ============================================================================ "
Plugin 'lervag/vimtex'
if !exists('g:ycm_semantic_triggers')
  let g:ycm_semantic_triggers = {}
endif
let g:ycm_semantic_triggers.tex = [
      \ 're!\\[A-Za-z]*cite[A-Za-z]*(\[[^]]*\]){0,2}{[^}]*',
      \ 're!\\[A-Za-z]*ref({[^}]*|range{([^,{}]*(}{)?))',
      \ 're!\\hyperref\[[^]]*',
      \ 're!\\includegraphics\*?(\[[^]]*\]){0,2}{[^}]*',
      \ 're!\\(include(only)?|input){[^}]*',
      \ 're!\\\a*(gls|Gls|GLS)(pl)?\a*(\s*\[[^]]*\]){0,2}\s*\{[^}]*',
      \ 're!\\includepdf(\s*\[[^]]*\])?\s*\{[^}]*',
      \ 're!\\includestandalone(\s*\[[^]]*\])?\s*\{[^}]*',
      \ ]
let g:ycm_semantic_triggers.lua = ['.', ':']
" let g:ycm_semantic_triggers.c = [
"   \ 're!\w\w\w\w+',
"   \ ]
let g:vimtex_view_general_viewer
      \ = '/Applications/Skim.app/Contents/SharedSupport/displayline'
" let g:vimtex_view_general_options = '-r @line @pdf @tex'
let g:vimtex_view_general_options = '@line @pdf @tex'
" This adds a callback hook that updates Skim after compilation
let g:vimtex_latexmk_callback_hooks = ['UpdateSkim']
function! UpdateSkim(status)
  if !a:status | return | endif

  let l:out = b:vimtex.out()
  let l:tex = expand('%:p')
  let l:cmd = [g:vimtex_view_general_viewer, '-r']
  if !empty(system('pgrep Skim'))
    call extend(l:cmd, ['-g'])
  endif
  if has('nvim')
    call jobstart(l:cmd + [line('.'), l:out, l:tex])
  elseif has('job')
    call job_start(l:cmd + [line('.'), l:out, l:tex])
  else
    call system(join(l:cmd + [line('.'),
          \ shellescape(l:out), shellescape(l:tex)], ' '))
  endif
endfunction
nnoremap <leader>tv :VimtexView<CR>

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - removal of unused plugins; `!` to auto-approve removal
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
" ================ Vundle Finish =====================
