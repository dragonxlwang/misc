#!/bin/sh
## ========================================================================== ##
#      _______       ___      .______     ____    __    ____  __  .__   __.    #
#     |       \     /   \     |   _  \    \   \  /  \  /   / |  | |  \ |  |    #
#     |  .--.  |   /  ^  \    |  |_)  |    \   \/    \/   /  |  | |   \|  |    #
#     |  |  |  |  /  /_\  \   |      /      \            /   |  | |  . `  |    #
#     |  '--'  | /  _____  \  |  |\  \----.  \    /\    /    |  | |  |\   |    #
#     |___________..________\ ________________\___  \_______ |__| |_______|    #
#         /       ||   _  \  |   ____| /      ||  | |   ____||  |  /      |    #
#        |   (----`|  |_)  | |  |__   |  ,----'|  | |  |__   |  | |  ,----'    #
#         \   \    |   ___/  |   __|  |  |     |  | |   __|  |  | |  |         #
#     .----)   |   |  |      |  |____ |  `----.|  | |  |     |  | |  `----.    #
#     |_______/    | _|      |_______| \______||__| |__|     |__|  \______|    #
                                                                               #
## ========================================================================== ##

## ========================================================================== ##
#                     ________      _______. __    __                          #
#                    |       /     /       ||  |  |  |                         #
#                    `---/  /     |   (----`|  |__|  |                         #
#                       /  /       \   \    |   __   |                         #
#                      /  /----.----)   |   |  |  |  |                         #
#                     /________|_______/    |__|  |__|                         #
## ========================================================================== ##
#  source /usr/local/etc/bash_completion.d/password-store

## ========================================================================== ##
#                  ___   .___________. ______   .___  ___.                     #
#                 /   \  |           |/  __  \  |   \/   |                     #
#                /  ^  \ `---|  |----|  |  |  | |  \  /  |                     #
#               /  /_\  \    |  |    |  |  |  | |  |\/|  |                     #
#              /  _____  \   |  |    |  `--'  | |  |  |  |                     #
#             /__/     \__\  |__|     \______/  |__|  |__|                     #
## ========================================================================== ##
function atom_ls_starred_packages {
  apm starred --json > starred.json;
  js='fs = require("fs");'
  js+='JSON.parse(fs.readFileSync("starred.json")).forEach'
  js+='(function(item){ console.log(item.name); })'
  node -e  $js;
  /bin/rm starred.json
}
function atom_ls_installed_packages {
  local ret=""
  ret=$(apm list --installed --bare)
  if [[ $1 == '--no-version' || $1 == '-n' ]]; then
    for f in $(echo $ret); do
      echo $f | sed -r 's/@.*//'
    done
  else
    echo $ret
  fi
}
alias atom_ls_starred='apm stars'
function atom_compare_packages {
  local opt_unstar=0
  local opt_uninstall=0
  local opt_star=0
  local opt_install=0
  for i in "$@"; do
    [[ ${i:l} == '--unstar' ]]    && opt_unstar=1;
    [[ ${i:l} == '--uninstall' ]] && opt_uninstall=1;
    [[ ${i:l} == '--star' ]]      && opt_star=1;
    [[ ${i:l} == '--install' ]]   && opt_install=1;
  done
  local dir=$PWD
  cd ${HOME}/.atom
  atom_ls_installed_packages -n > installed.list
  atom_ls_starred_packages > starred.list
  local starred="$(diff installed.list starred.list | \
    sed -rn 's/^>[[:space:]]*//p')"
  local instald="$(diff installed.list starred.list | \
    sed -rn 's/^<[[:space:]]*//p')"
  [[ -n ${instald// /} ]] && greenecho "Installed but not starred packages:"
  for p in "${(f)instald}";
  do
    [[ -n ${p// /} ]] && cyanecho "==> $p"
    if [[ opt_star -eq 1 ]]; then
      redecho "   star $p"
      apm star ${p// /}
    fi
    if [[ opt_uninstall -eq 1 ]]; then
      redecho "    uninstall $p"
      apm uninstall ${p// /}
    fi
  done
  [[ -n ${starred// /} ]] && greenecho "Starred but not installed packages:"
  for p in "${(f)starred}";
  do
    [[ -n ${p// /} ]] && yellowecho "==> $p"
    if [[ $opt_unstar -eq 1 ]]; then
      redecho "    unstar $p"
      apm unstar ${p// /}
    fi
    if [[ $opt_install -eq 1 ]]; then
      redecho "    install $p"
      apm install ${p// /}
    fi
  done
  greenecho "Compare Finished!"
  cd $dir
}
alias atom_star_installed='apm star --installed'
alias atom_install_starred='apm stars --install'
function atom_install_from_list { apm install  $( cat ${1} ) }
function atom_star_only_installed {
  local dir=$PWD
  cd ${HOME}/.atom
  atom_ls_starred_packages > starred.list
  apm unstar `cat starred.list`;
  apm star --installed;
  /bin/rm starred.list;
  cd $dir
}
function atom_sync_package_incremental {
  local dir=$PWD
  cd ${HOME}/.atom
  atom_ls_installed_packages -n > installed.list
  atom_ls_starred_packages > starred.list
  local starred="$(diff installed.list starred.list | \
    sed -rn 's/^>[[:space:]]*//p')"
  local instald="$(diff installed.list starred.list | \
    sed -rn 's/^<[[:space:]]*//p')"
  [[ -n ${instald// /} ]] && cyanecho "Installed but not starred packages:"
  for p in "${(f)instald}";
  do
    [[ -n ${p// /} ]] && { redecho "==>  $p";  apm star "$p" }
  done
  [[ -n ${starred// /} ]] && cyanecho "Starred but not installed packages:"
  for p in "${(f)starred}";
  do
    [[ -n ${p// /} ]] && { redecho "==> $p"; apm install "$p" }
  done
  cyanecho "Sync Finished!"
  /bin/rm starred.list installed.list
  cd $dir
}

## ========================================================================== ##
#                  ______        _______.         ___   ___                    #
#                 /  __  \      /       |         \  \ /  /                    #
#                |  |  |  |    |   (----`          \  V  /                     #
#                |  |  |  |     \   \               >   <                      #
#                |  `--'  | .----)   |             /  .  \                     #
#                 \______/  |_______/             /__/ \__\                    #
## ========================================================================== ##
function mac_show_hidden {
  defaults write com.apple.finder AppleShowAllFiles YES
  killall Finder
}
function mac_hide_hidden {
  defaults write com.apple.finder AppleShowAllFiles NO
  killall Finder
}
function mac_disable_accent_char {
  defaults write -g ApplePressAndHoldEnabled -bool false
}
function mac_enable_accent_char {
  defaults write -g ApplePressAndHoldEnabled -bool true
}

## ========================================================================== ##
#            __    __  .___________.__   __          _______.                  #
#           |  |  |  | |           |  | |  |        /       |                  #
#           |  |  |  | `---|  |----|  | |  |       |   (----`                  #
#           |  |  |  |     |  |    |  | |  |        \   \                      #
#           |  `--'  |     |  |    |  | |  `----.----)   |                     #
#            \______/      |__|    |__| |_______|_______/                      #
## ========================================================================== ##
##---------------------== open chrome with url/file ==------------------------##
function go_url {
  "${HOME}/Applications/Google Chrome.app/Contents/MacOS/Google Chrome" -app=$1
}
function go_file {
  go_url file:///$(readlink -f $1)
}
function go_chrome {
  "${HOME}/Applications/Google Chrome.app/Contents/MacOS/Google Chrome" $1
}
##----------------------== convert MOV to GIF file ==-------------------------##
function convert_mov_to_gif {
  if [[ $(echo $1 | tr "[:upper:]" "[:lower:]") == *.mov ]]; then
    local opt_publish=0
    local opt_date=0
    local opt_res=600
    for (( i = 1; i <= $#; i++ )); do
      #statements
      local arg=${(P)i}
      [[ ${arg:l} == "-p" || ${arg:l} == "--publish" ]] && opt_publish=1
      [[ ${arg:l} == "-d" || ${arg:l} == "--date" ]] && opt_date=1
      [[ ${arg:l} == -r* ]] && opt_res=${arg:2}
    done
    cyanecho "input file: ${1}"
    cyanecho "if publish to dropbox: $opt_publish"
    cyanecho "if rename by date: $opt_date"
    cyanecho "width max resolution: $opt_res"
    local f=$(echo $1 | sed 's/mov$/gif/i')
    opt_res="scale=min(iw\,${opt_res}):-1"
    ffmpeg -i $1 -vf "${opt_res}" -pix_fmt rgb24 -r 10 -f gif - |\
    # convert -delay 5 -layers Optimize -loop 0 - $f
    gifsicle --optimize=3 --delay=7 > $f
    if [[ opt_publish -eq 1 ]]; then
      local f0="${HOME}/Dropbox/Public"
      local home_url=$(cat "${HOME}/Dropbox/Public/home_url")
      local f1=/$(basename $f)
      if [[ opt_date -eq 1 ]]; then
        f1="/screenshots/Screencast-"
        f1+=`date +"%Y.%m.%d-%H.%M"`.gif
      fi
      mv $f "$f0$f1"
      cyanecho "converted gif file: $f0$f1"
      cyanecho "public url is: $home_url$f1"
    fi
  else
    redecho "$1 is not a .mov file"
  fi
}
##-----------------------------== markdown ==---------------------------------##
function markdown {
  local f=$(echo $1 | sed 's/\(md\|markdown\)$/html/i')
  local lr="https://raw.githubusercontent.com/daktales/Mou-Themes-Collection/"
  lr+="master/Mou%20Themes%20Collection/CSS/"
  local -a css
  css=("Solarized%20(Light).css" "Solarized%20(Dark).css" "realm.css")
  for c in "${css[@]}"
  do
    pushd ~/Library/Application\ Support/Mou/CSS/  > /dev/null
    if [[ ! -r $c ]]; then
      curl -OL $lr$c
    fi
    popd > /dev/null
  done
  local layout="Solarized%20(Light).css"
  cp ~/Library/Application\ Support/Mou/CSS/$layout tmp.css
  pandoc $1 -s -c tmp.css --self-contained --toc -o $f
  command rm tmp.css
  # /usr/local/bin/markdown --html4tags $1 > $f
}
function markdown_toc {
  /usr/local/Cellar/github-markdown-toc/0.6.0/bin/gh-md-toc $1
}

## ========================================================================== ##
#        .___________.    ___           _______. __  ___      _______.         #
#        |           |   /   \         /       ||  |/  /     /       |         #
#        `---|  |----`  /  ^  \       |   (----`|  '  /     |   (----`         #
#            |  |      /  /_\  \       \   \    |    <       \   \             #
#            |  |     /  _____  \  .----)   |   |  .  \  .----)   |            #
#            |__|    /__/     \__\ |_______/    |__|\__\ |_______/             #
## ========================================================================== ##
function _smart_ssh {
  local is_inside_tmux=$1
  local t_host=$2
  if [[ $is_inside_tmux -eq 1 ]]; then
    # login shell: bash_profile directs to zsh
    ssh $t_host
  else
    # non-login shell: bashrc only add paths
    ssh $t_host -t 'tmux new -AD -s $(hostname -s)-main'
  fi
}

function _list_task {
  local caller_is_profile=$1
  local is_inside_tmux=0
  [[ -n "$TMUX" ]] && is_inside_tmux=1
  local option=$2
  # finish if called from profile and inside tmux
  [[ $caller_is_profile -eq 1 && $is_inside_tmux -eq 1 ]]  && return
  local str1="  (1/t) :   tmux new -AD -s $(hostname -s)-main"
  local str2="  (2/n) :   zsh"
  local str3="  (3)   :   mosh dev11919.prn2.facebook.com (dev)"
  local str4="  (4)   :   mosh dev15039.prn1.facebook.com (dev2)"
  # main loop
  while [[ -z $option ]]
  do
    redecho "Following starting options are available:"
    cyanecho $str1
    cyanecho $str2
    cyanecho $str3
    cyanecho $str4
    whiteecho $(printf '=%.0s' {1..50})
    yellowecho -n "Select One Option From (1) - (4): "
    read option
    if [[ $option == 1* || $option == t* ]]; then option=1
    elif [[ $option == 2* || $option == n* ]]; then option=2
    elif [[ $option == 3* ]]; then option=3
    elif [[ $option == 4* ]]; then option=4
    else
      redecho "  Input Not Recognized..."
      echo ""
      option=""
    fi
  done
  whiteecho $(printf '=%.0s' {1..50})
  greenecho "caller_is_profile  :  $caller_is_profile"
  greenecho "is_inside_tmux     :  $is_inside_tmux"
  greenecho "option             : (${option})"
  if [[ $option -eq 1 ]]; then
    redecho $str1
    [[ $is_inside_tmux -eq 1 ]] && redecho "already in tmux" || \
      tmux new -AD -s $(hostname -s)-main
  elif [[ $option -eq 2 ]]; then
    redecho $str2
  elif [[ $option -eq 3 ]]; then
    redecho $str3
    mosh dev
  elif [[ $option -eq 4 ]]; then
    redecho $str4
    mosh dev2
  fi
}

alias lt="_list_task 0"
[[ -t 1 ]] && _list_task 1
