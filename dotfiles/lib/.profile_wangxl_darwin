#!/bin/sh
#########################
# Mac Specific Settings #
#########################

# Homebrew permission problem
## sudo chown $(whoami):admin /usr/local \
##  && sudo chown -R $(whoami):admin /usr/local
## brew install coreutils
export HOMEBREW_GITHUB_API_TOKEN=2f9b5d70c1d10d2238d2b4846efb68a111524122

# To activate these completions, add the following to your .zshrc:
fpath=(/usr/local/share/zsh-completions $fpath)
#You may also need to force rebuild `zcompdump`:
#
#  rm -f ~/.zcompdump; compinit
#
#Additionally, if you receive "zsh compinit: insecure directories" warnings
#when attempting to load these completions, you may need to run this:
#
#  chmod go-w /usr/local/share

#source /usr/local/etc/bash_completion.d/password-store

# atom
function atom_ls_starred_packages {
  apm starred --json > starred.json;
  js='fs = require("fs");'
  js+='JSON.parse(fs.readFileSync("starred.json")).forEach'
  js+='(function(item){ console.log(item.name); })'
  node -e  $js;
  /bin/rm starred.json
}
function atom_ls_installed_packages {
  local ret=""
  ret=$(apm list --installed --bare)
  if [[ $1 == '--no-version' || $1 == '-n' ]]; then
    for f in $(echo $ret); do
      echo $f | sed -r 's/@.*//'
    done
  else
    echo $ret
  fi
}
alias atom_ls_starred='apm stars'
function atom_compare_packages {
  local opt_unstar=0
  local opt_uninstall=0
  local opt_star=0
  local opt_install=0
  for i in "$@"; do
    [[ ${i:l} == '--unstar' ]]    && opt_unstar=1;
    [[ ${i:l} == '--uninstall' ]] && opt_uninstall=1;
    [[ ${i:l} == '--star' ]]      && opt_star=1;
    [[ ${i:l} == '--install' ]]   && opt_install=1;
  done
  local dir=$PWD
  cd ${HOME}/.atom
  atom_ls_installed_packages -n > installed.list
  atom_ls_starred_packages > starred.list
  local starred="$(diff installed.list starred.list | \
    sed -rn 's/^>[[:space:]]*//p')"
  local instald="$(diff installed.list starred.list | \
    sed -rn 's/^<[[:space:]]*//p')"
  [[ -n ${instald// /} ]] && greenecho "Installed but not starred packages:"
  for p in "${(f)instald}";
  do
    [[ -n ${p// /} ]] && blueecho "==> $p"
    if [[ opt_star -eq 1 ]]; then
      redecho "   star $p"
      apm star ${p// /}
    fi
    if [[ opt_uninstall -eq 1 ]]; then
      redecho "    uninstall $p"
      apm uninstall ${p// /}
    fi
  done
  [[ -n ${starred// /} ]] && greenecho "Starred but not installed packages:"
  for p in "${(f)starred}";
  do
    [[ -n ${p// /} ]] && yellowecho "==> $p"
    if [[ $opt_unstar -eq 1 ]]; then
      redecho "    unstar $p"
      apm unstar ${p// /}
    fi
    if [[ $opt_install -eq 1 ]]; then
      redecho "    install $p"
      apm install ${p// /}
    fi
  done
  greenecho "Compare Finished!"
  cd $dir
}
alias atom_star_installed='apm star --installed'
alias atom_install_starred='apm stars --install'
function atom_install_from_list { apm install  $( cat ${1} ) }
function atom_star_only_installed {
  local dir=$PWD
  cd ${HOME}/.atom
  atom_ls_starred_packages > starred.list
  apm unstar `cat starred.list`;
  apm star --installed;
  /bin/rm starred.list;
  cd $dir
}
function atom_sync_package_incremental {
  local dir=$PWD
  cd ${HOME}/.atom
  atom_ls_installed_packages -n > installed.list
  atom_ls_starred_packages > starred.list
  local starred="$(diff installed.list starred.list | \
    sed -rn 's/^>[[:space:]]*//p')"
  local instald="$(diff installed.list starred.list | \
    sed -rn 's/^<[[:space:]]*//p')"
  [[ -n ${instald// /} ]] && greenecho "Installed but not starred packages:"
  for p in "${(f)instald}";
  do
    [[ -n ${p// /} ]] && { blueecho "==>  $p";  apm star "$p" }
  done
  [[ -n ${starred// /} ]] && greenecho "Starred but not installed packages:"
  for p in "${(f)starred}";
  do
    [[ -n ${p// /} ]] && { yellowecho "==> $p"; apm install "$p" }
  done
  greenecho "Sync Finished!"
  /bin/rm starred.list installed.list
  cd $dir
}

# ipython
alias start_ipython='cd ${HOME}/Dropbox/workspace/ipython; jupyter notebook'
alias start_tunnel_ipython='ssh -N -f -L localhost:8889:localhost:8889 timan101'
function kill_tunnel_ipython {
  # quote the command substitution
  # stackoverflow.com/questions/31521221/zsh-local-keyword-not-an-identifier
  local pids="$(ps aux | \
               grep 'ssh -N -f -L localhost:8889:localhost:8889 timan101' | \
               awk '{print $2}')"
  for i in ${=pids};
  do
    local comm=$(ps -p $i -o comm=)
    if [[ $comm == ssh* ]]; then
      echo "kill PID:($i) "$comm
      kill -9 $i
    fi
  done
}

# mac:
function mac_show_hidden {
  defaults write com.apple.finder AppleShowAllFiles YES
  killall Finder
}
function mac_hide_hidden {
  defaults write com.apple.finder AppleShowAllFiles NO
  killall Finder
}
function mac_disable_accent_char {
  defaults write -g ApplePressAndHoldEnabled -bool false
}
function mac_enable_accent_char {
  defaults write -g ApplePressAndHoldEnabled -bool true
}

# open chrome with url/file
function go_url {
  "${HOME}/Applications/Google Chrome.app/Contents/MacOS/Google Chrome" -app=$1
}
function go_file {
  go_url file:///$(readlink -f $1)
}
function go_chrome {
  "${HOME}/Applications/Google Chrome.app/Contents/MacOS/Google Chrome" $1
}

# remove all .DS_store files in current directory recursively
function rm_finder_hidden_files {
  find . -name '*.DS_Store'  -type f -delete -print
  find . -name '*.localized' -type f -delete -print
}

# convert .mov to .gif annimation files
function convert_mov_to_gif {
  if [[ $(echo $1 | tr "[:upper:]" "[:lower:]") == *.mov ]]; then
    local f=$(echo $1 | sed 's/mov$/gif/i')
    ffmpeg -i $1 -vf "scale=min(iw\,600):-1" -pix_fmt rgb24 -r 10 -f gif - |\
    # convert -delay 5 -layers Optimize -loop 0 - $f
    gifsicle --optimize=3 --delay=7 > $f
    if [[ $2 == --publish ||  $2 == -p ]]; then
      local f0="${HOME}/Dropbox/Public"
      local home_url=$(cat "${HOME}/Dropbox/Public/home_url")
      local f1=/$(basename $f)
      if [[ $3 == --date || $3 == -d ]]; then
        f1="/screenshots/Screencast-"
        f1+=`date +"%Y.%m.%d-%H.%M"`.gif
      fi
      mv $f "$f0$f1"
      yellowecho "converted gif file: $f0$f1"
      yellowecho "public url is: $home_url$f1"
    fi
  else
    echo "$1 is not a .mov file"
  fi
}

# markdown
function markdown {
    local f=$(echo $1 | sed 's/\(md\|markdown\)$/htm/i')
    /usr/local/bin/markdown --html4tags $1 > $f
}

# update homebrew, oh-my-zsh, pip and source profile again
function update_scripts {
  upgrade_oh_my_zsh
  yellowecho "brew update"
  brew update
  yellowecho "brew upgrade"
  brew upgrade
  yellowecho "brew cask update"
  brew cask update
  yellowecho "brew cask cleanup"
  brew cask cleanup
  yellowecho "brew cleanup"
  brew cleanup
  yellowecho "pip install --upgrade pip"
  pip install --upgrade pip
  # yellowecho "pip update package"
  # pip freeze --local | grep -v '^\-e' | cut -d = -f 1  |\
  # xargs -n1 pip install -U
  yellowecho "source profile_wangxl"
  source ${HOME}/.profile_wangxl
  yellowecho "source tmux conf"
  tmux source ${HOME}/.tmux.conf
  yellowecho "vundle update"
  vim +PluginInstall +qall
}

function lt {
  if [[ -z "$TMUX" ]]
    then
    local option=""
    while true
    do
      echo "Following starting options are available:"
      yellowecho "  (1)	:   ssh timan101"
      yellowecho "  (2)	:   ssh timan102"
      yellowecho "  (3)	:   ssh timan103"
      yellowecho "  (4/t)	:   tmux new -AD -s $(hostname -s)-main"
      yellowecho "  (5/n)	:   zsh"
      echo $(printf '=%.0s' {1..50})
      echo -n "Select One Option From (1) - (5): "
      if [[ $# -eq 1 ]]; then echo $1; option=$1; else read option; fi
      if [[ $option == 1* ]]; then
        echo "  (1)	:   ssh timan101"
        option=1
        break
      elif [[ $option == 2* ]]; then
        echo "  (2)	:   ssh timan102"
        option=2
        break
      elif [[ $option == 3* ]]; then
        echo "  (3)	:   ssh timan103"
        option=3
        break
      elif [[ $option == 4* || $option == t* ]];  then
        echo "  (4)	:   tmux new -AD -s $(hostname -s)-main"
        option=4
        break
      elif [[ $option == 5* || $option == n* ]];  then
        echo "  (5)	:   zsh"
        option=5
        break
      else
        redecho "  Input Not Recognized..."
      fi
    done
    [[ $option -eq 1 ]] && ssh timan101
    [[ $option -eq 2 ]] && ssh timan102
    [[ $option -eq 3 ]] && ssh timan103
    [[ $option -eq 4 ]] && { tmux new -AD -s $(hostname -s)-main }
  fi
}

[[ -t 1 ]] && lt
