#!/bin/sh
## ========================================================================== ##
#       ______   ______    __        ______   .______          _______.        #
#      /      | /  __  \  |  |      /  __  \  |   _  \        /       |        #
#     |  ,----'|  |  |  | |  |     |  |  |  | |  |_)  |      |   (----`        #
#     |  |     |  |  |  | |  |     |  |  |  | |      /        \   \            #
#     |  `----.|  `--'  | |  `----.|  `--'  | |  |\  \----.----)   |           #
#      \______| \______/  |_______| \______/  | _| `._____|_______/            #
## ========================================================================== ##
# print with or without newline
function _color_echo {
  if [[ "$2" == "-n" ]]; then
    echo -ne "\033[${1}${@:3}\033[0m"
  else
    echo -e "\033[${1}${@:2}\033[0m";
  fi
}
function blackecho    { _color_echo "1;30m" "${@}"; }
function redecho      { _color_echo "1;31m" "${@}"; }
function greenecho    { _color_echo "1;32m" "${@}"; }
function yellowecho   { _color_echo "1;33m" "${@}"; }
function blueecho     { _color_echo "1;34m" "${@}"; }
function magentaecho  { _color_echo "1;35m" "${@}"; }
function cyanecho     { _color_echo "1;36m" "${@}"; }
function whiteecho    { _color_echo "1;37m" "${@}"; }
function fromhex(){
  local hex=${1#"#"}
  local r=$(printf '0x%0.2s' "$hex")
  local g=$(printf '0x%0.2s' ${hex#??})
  local b=$(printf '0x%0.2s' ${hex#????})
  printf '%03d' "$(( (r<75?0:(r-35)/40)*6*6   +
  (g<75?0:(g-35)/40)*6    +
  (b<75?0:(b-35)/40)      + 16 ))"
}
function palette {
  if [[ $# -eq 0 ]]; then
    echo "Color Schema 1"
    ${HOME}/misc/scripts/color_test.sh
    echo "Color Schema 2"
    ${HOME}/misc/scripts/256_colors.sh
    echo "Color Schema 3"
    ${HOME}/misc/scripts/256_to_rgb.sh
    return
  fi
  local color=$1
  if [[ $color == "#"* ]]; then
    color=$(echo $color | cut -c 2-)
    color=$(fromhex $color)
  fi
  echo -en "\033[38;5;${color}m ${color}\t\033[0m"
  echo ""
  echo -en "\033[48;5;${color}m ${color}\t\033[0m"
  echo ""
}

## ========================================================================== ##
#               ___       __       __       ___           _______.             #
#              /   \     |  |     |  |     /   \         /       |             #
#             /  ^  \    |  |     |  |    /  ^  \       |   (----`             #
#            /  /_\  \   |  |     |  |   /  /_\  \       \   \                 #
#           /  _____  \  |  `----.|  |  /  _____  \  .----)   |                #
#          /__/     \__\ |_______||__| /__/     \__\ |_______/                 #
## ========================================================================== ##
##-------------------------------== general ==--------------------------------##
function test_alias_exist { alias $1 2>/dev/null >/dev/null; }
function setup_ssh_client_for_tmux {
  echo "$SSH_CONNECTION"  > ~/.active_ssh_client_for_tmux
  # echo "$SSH_CLIENT" > ~/.active_ssh_client_for_tmux
  # who | grep ${$(tty)##/dev/} | \
  #   sed -rn 's/.*\((\S*).*\)/\1/p' > ~/.active_ssh_client_for_tmux
  #
  #
  # who | grep ${$(tty)##/dev/} | awk '{ print $(2) }'  > ~/.active_ssh_tty

#
}
function tmux_setup {
  setup_ssh_client_for_tmux
  tmux new -AD -s $(hostname -s)-main;
}
function tt {
  if [[ -n $TMUX ]]; then
    tmux attach > /dev/null 2>&1
  else
    tmux_setup
  fi
}
function exe_remote_script {
  eval "$(curl -fsSL $1)"
}
alias help='man'
function echo_path { echo ${${1:-$PATH}//:/$'\n'}; }
function colorize_column {
  local s="$(sed "s/[^[:blank:]]\{1,\}/\\\\033[${1}&\\\\033[0m/${2}")"
  echo -e $s
}
function get_hostname {
  ssh -G $1 | awk '/^hostname / { print $2 }'
}
function rvmv {
  mv $2 $1
}
function uncolor {
  echo "$1" | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g"
}
if [[ -n $(command -v python3) ]]; then
  alias python='python3'
  alias py='python3'
fi
function ddate {
  echo "( $(date -d $2 +%s)  -  $(date -d $1 +%s) )/86400 + 1" | bc
}
alias oscyank="~/misc/scripts/oscyank.sh"
function oscstr {
  echo "$@" | oscyank -
}
##--------------------------------== admin ==---------------------------------##
function _psfmt {
  if [[ $(uname) == "Linux" ]]; then
    # only gnu ps has tid option
    local fmt="user,tid,ppid,pcpu,cpu,pmem,rss,tty,state,pri,nice,start,time"
  else
    local fmt="user,pid,ppid,pcpu,cpu,pmem,rss,tty,state,pri,nice,start,time"
  fi
  if [[ $1 == "comm" ]]; then
    fmt+=",comm"
  else
    fmt+=",command"
  fi
  if [[ $(uname) == "Linux" ]]; then
    echo "$(ps -e H -o $fmt)"
  else
    echo "$(ps -e -o $fmt)"
  fi
}
function pscpu {
  local s="$(_psfmt comm)"
  local h="$(echo $s | head -1)"
  local b="$(echo $s | sed 1d)"
  greenecho $h
  b="$(echo $b | sort -k4 -rn)"
  echo "$b" | head $@ | colorize_column "1;36m" 4
}
function psmem {
  local s="$(_psfmt comm)"
  local h="$(echo $s | head -1)"
  local b="$(echo $s | sed 1d)"
  greenecho $h
  b="$(echo $b | sort -k7 -rn)"
  echo "$b" | head $@ | colorize_column "1;36m" 7
}
function psmine {
  local u=$(whoami)
  local s="$(_psfmt comm)"
  local h="$(echo $s | head -1)"
  local b="$(echo $s | sed 1d)"
  greenecho $h
  b="$(echo $b | awk -v var=${u} '{if ($1 == var) {print $0} }')"
  echo "$b" | colorize_column "1;36m" 1
}
alias pscmd='print -l ${(o)history%% *} | uniq -c | sort -nr | head'
# case insensitive grep
function psgrep { _psfmt | grep -i $1 --color=always | grep -v grep; }
function pszombies { _psfmt "comm" | awk '{ if ($9 == "Z") {print $0} }'; }
# ps pid
function pspidgrep { _psfmt | grep -i $1 | grep -v grep | awk '{print $2}'; }
function pspidmine { psmine | sed 1d | awk '{print $2}'; }
# case sensitive kill
function pskill {
  ps aux | grep -v "grep" | grep "$@" | awk '{print $2}' | xargs kill -9;
}
# kill from joblist
function kill_jobs {
  if [[ -n $(jobs) ]];
  then
    for i in $(seq 1 $(jobs | wc -l));
    do kill -9 %$i;
    done
  fi
}
function kill_zombies {
  ps -e -o pid,state | awk '{ if ($2 == "Z") {print $1} }' | xargs  kill -9;
}
alias cls='printf "\033c"'
alias tmux_kill='tmux kill-session'
alias tmux_halt='tmux detach'
function q {
  if [[ -z $TMUX ]]; then
    return 0

  else
    tmux detach
  fi
}
function check_busy { lsof +D ${@:-.}; }
alias nicer="sudo renice -20"
alias unnice="renice 0"
function nicer_all {
  local ni=${1:-"-20"}
  local x
  for x in "${(@f)$(pspidmine)}";
  do
    redecho "renice $ni $x"
    sudo renice ${ni} ${x}
  done
}
function unnice_all {
  local x
  for x in "${(@f)$(pspidmine)}";
  do
    redecho "nicer ${x}"
    unnice ${x}
  done
}
alias centos_version='cat /etc/redhat-release'
alias kill_mosh="kill $(pidof mosh-server)"
function kill_tty {
  # w
  # kill_tty pts/33
  # w | sed -n "s/$USER/\0/p" | awk '{print $2}'
  ps -H -t /dev/$1 | awk '{ print $1}' | tail -n 2 | xargs kill -9
}
##------------------------------== file list ==-------------------------------##
## ls -A: List all entries except for . and ...
## zsh f expansion flag to split on newline: arr_of_lns=("${(@f)$(my_cmd)}")
## @: In double quotes, array elements are put into separate words.
##    E.g., ‘"${(@)foo}"’ is equivalent to ‘"${foo[@]}"’ and ‘"${(@)foo[1,2]}"’
##    is the same as ‘"$foo[1]" "$foo[2]"’.
##    This is distinct from field splitting by the f, s or z flags, which still
##    applies within each array element.
## unix.stackexchange.com/questions/28854/list-elements-with-spaces-in-zsh
alias ls_dir_size='for f in "${(@f)$(ls -A)}"; do du -sh $f; done;'
function lsds {
  local du_ver=$(du --version | sed '1q;d' | sed 's/[^0-9.]*\([0-9.]*\).*/\1/')
  if [[ $du_ver -le 8.25 ]]; then
    du -ahd1
  else
    du -ah --max-depth 1
  fi
}
alias dls='find . -maxdepth 1 -type d'
# ls
alias ll="ls -alh"
alias llt="ll -t"
function lll { ll $@ --color=always | less -r; }
alias lllt="lll -t"
function lls { ll | grep $*; }
alias llsi='lls -i'
function ll_symlink {
  ll "$@" --color=always | grep "\->";
}
# cd
function jump { if [[ $# -eq 1 ]]; then cd $1; fi; cd $(pwd -P); }
function follow { cd $(dirname $(readlink -f $1)); }
alias jp="jump"
alias fl="follow"
# tree might not installed; use ugly tree instead
if [ -z "\${which tree}" ]; then
  tree () {
    find $@ -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'
  }
fi
# gather external ip address
alias show_external_ip="curl -s -S https://icanhazip.com"
alias showptr="curl -s -S -k https://icanhazptr.com"
# gather external/local ip address
alias showip="${HOME}/misc/scripts/ip_lookup.sh all"
##--------------------------------== remove ==--------------------------------##
# real remove
alias rrm='/bin/rm -v'
function rm {
  [[ ! -d ~/.Trash ]] && mkdir ~/.Trash
  local ret=""
  local l
  ret=$(mv --verbose -f --backup=numbered --target-directory ${HOME}/.Trash/ "$@")
  redecho $ret
  local reg=""
  local f1=""
  local f2=""
  local fp="${HOME}/.Trash/rm.undo"
  echo "#!/bin/sh" > $fp
  for l in ${(f)ret}; do
    reg='s/^(.*) -> (.*)$/\1/p'
    f1=$(echo $l | sed -rn $reg)
    if [[ -z $f1 ]]; then
      continue
    fi
    f1=${f1:1:${#f1}-2}
    reg='s/^(.*) -> (.*)$/\2/p'
    f2=$(echo $l | sed -rn $reg)
    f2=$(echo $f2 | sed -r 's/ \(backup: .*\)//')
    f2=${f2:1:${#f2}-2}
    [[ $f1 != /* ]] && f1="$PWD/$f1"
    echo "# \"$f1\" -> \"$f2\"" >> $fp
    echo "mv \"$f2\" \"$f1\"" >> $fp
    echo "echo \"\\033[1;33mmv \\\"$f2\\\" \\\"$f1\\\"\\033[0m\"" >> $fp
  done
}

alias rm=rm
function undo {
  local fp="${HOME}/.Trash/rm.undo"
  /bin/sh $fp
}
alias empty_trash='find ~/.Trash -mindepth 1 -delete -print'
# remove the following
## all mac .DS_store/.localized files in current directory recursively
function rm_mac_hidden_files {
  local clean_place=${*:-'.'}
  find $clean_place -name '*.DS_Store'  -type f -delete -print
  find $clean_place -name '*.localized' -type f -delete -print
}
## all python .py[co] files and __pycache__ dirs
alias rm_python_compiled_files="pyclean"
function rm_python_compiled_files_no_recursion {
  local clean_place=${*:-'.'}
  find $clean_place -maxdepth 1 -type f -name "*.py[co]" -delete
  find $clean_place -maxdepth 1 -type d -name "__pycache__" -delete
}
## all vim swap .sw[pon]
function rm_vim_swap_files {
  local clean_place=${*:-'.'}
  find $clean_place -name '*.sw[ponlmk]'  -type f -delete -print
}
function rm_vim_swap_files_no_recursion {
  local clean_place=${*:-'.'}
  find $clean_place -maxdepth 1 -name '*.sw[pon]'  -type f -delete -print
}
##-------------------------------== history ==--------------------------------##
## show history with time, increase history size
## https://github.com/robbyrussell/oh-my-zsh/issues/739
## ./.oh-my-zsh/lib/history.zsh
## "mm/dd/yyyy":  -f
## "dd.mm.yyyy":  -E
## "yyyy-mm-dd":  -i
## HISTSIZE is the maximum number of lines that are kept in a session and
## SAVEHIST is the maximum number of lines that are kept in the history file.
alias history='fc -i -l 1'
# oh-my-zsh/plugins/history/history.plugin.zsh
function histg { history | grep $*; }
alias histgi='histg -i'
HISTSIZE=130000
SAVEHIST=130000
##---------------------------== search and find ==----------------------------##
# grep: recursive, ln num, show file name, context
alias ggrep="grep -R -n -H -C5"
function ggs {
  grep -R -l $1 | xargs sed -i "s/$1/$2/g"
}
alias ggi="grep -R -n -H -C5 -i"
function ggsi {
  grep -R -l -i $1 | xargs sed -i "s/$1/$2/gi"
}
alias rm_color="sed -r 's/\x1b\[[0-9;]*m//g'"
alias ggt="grep -R -n -H -C5 --include"
alias ggti="grep -R -n -H -C5 -i --include"
# find: search file/directory
alias sd='find . -type d -name'
alias sf='find . -type f -name'
alias sdi='find . -type d -iname'
alias sfi='find . -type f -iname'
##------------------------== pipes and redirection ==-------------------------##
alias strip_color="sed 's/\x1b\[[0-9;]*m//g'"
# pipes
alias -g PH='| head'
alias -g PT='| tail'
alias -g PG='| grep'
alias -g PGI='| grep -i'
alias -g PL="| less"
alias -g PCL="--color=always | less -r"
alias -g PNC="| strip_color"
alias -g PM="| strip_color | Mail"
alias -g PMM="PM -s \"Auto notification from $(hostname) on $(date)\" $(whoami)@fb.com"
alias -g PP="| pygmentize"
alias -g PC="| cat -A"
alias -g PF="| fpp"
alias -g PLL="2>&1 | less"
alias -g PCC="2>&1 | cat -A"
alias -g PPP="2>&1| pygmentize"
alias -g PPL="| pygmentize -O full,style=monokai -l ocaml | less -R +G"
# redirection
alias -g RNE="2> /dev/null"
alias -g RALL="2>&1"
alias -g RNUL="> /dev/null 2>&1"
alias -g FPP="| fpp"
alias -g send_email_notification=" > >(cat) > >(strip_color PMM)"
alias -g TAP="2>&1| tee >(arc paste)"
##---------------------------------== vim ==----------------------------------##
export FPP_EDITOR="${HOME}/misc/scripts/fpp_vim.sh"
function vim_buffers {
  local found=0
  local exe_path
  if [[ -z $1 ]]; then
    local curpwd=$(pwd)
    while [[ ! -e $(pwd)/buffers.list && $(pwd) != $(dirname $(pwd)) ]]; do
      cd $(dirname $(pwd))
    done
    if [[ -e $(pwd)/buffers.list ]]; then
      exe_path=$(pwd)/buffers.list
    else
      exe_path="${HOME}/.vim/buffers.list"
    fi
    cd ${curpwd}
  else
    exe_path="$1"
  fi
  cyanecho $exe_path

  local dir="$(sed '2q;d' $exe_path)"
  cd $dir
  local -a filelist
  filelist=()
  for x in "${(f)$(sed '1,2d' $exe_path)}"; do
    local file="$(echo $x | sed 's/.*"\(.*\)".*/\1/')"
    file="${file/#\~/$HOME}"
    echo $file
    [[ -n $file ]] && { filelist+=($file); }
  done
  vim ${filelist[@]}
}
alias vimb='vim_buffers'
alias vimfb='vim +FBVimLoadSession'
# alias fbvim='vim "+let g:no_fp_winent=1" +FBVimLoadSession "+unlet g:no_fp_winent"'
function fbvim {
  vim "+FBVimLoadSession $@"
}
##---------------------------------== tex ==----------------------------------##
alias tm="${HOME}/misc/scripts/tex_make.sh make"
alias tp="${HOME}/misc/scripts/tex_make.sh preview"
alias tc="${HOME}/misc/scripts/tex_make.sh clean"

## ========================================================================== ##
#       _______.  ______ .______      __  .______   .___________.    _______.  #
#      /       | /      ||   _  \    |  | |   _  \  |           |   /       |  #
#     |   (----`|  ,----'|  |_)  |   |  | |  |_)  | `---|  |----`  |   (----`  #
#      \   \    |  |     |      /    |  | |   ___/      |  |        \   \      #
#  .----)   |   |  `----.|  |\  \----|  | |  |          |  |    .----)   |     #
#  |_______/     \______|| _| `._____|__| | _|          |__|    |_______/      #
#                    _______  _______   __  .___________.                      #
#                   |   ____||       \ |  | |           |                      #
#                   |  |__   |  .--.  ||  | `---|  |----`                      #
#                   |   __|  |  |  |  ||  |     |  |                           #
#                   |  |____ |  '--'  ||  |     |  |                           #
#                   |_______||_______/ |__|     |__|                           #
#              __    __  .______    _______       ___   .___________._______   #
#    ___      |  |  |  | |   _  \  |       \     /   \  |           |   ____|  #
#   ( _ )     |  |  |  | |  |_)  | |  .--.  |   /  ^  \ `---|  |----|  |__     #
#   / _ \/\   |  |  |  | |   ___/  |  |  |  |  /  /_\  \    |  |    |   __|    #
#  | (_>  <   |  `--'  | |  |      |  '--'  | /  _____  \   |  |    |  |____   #
#   \___/\/    \______/  | _|      |_______/ /__/     \__\  |__|    |_______|  #
## ========================================================================== ##
##-------------------------------== profiles ==-------------------------------##
function edit_then_source { vim $1; cyanecho "sourcing $1"; source $1; }
function ed_profile {
  local f1="${HOME}/misc/dotfiles/lib/.profile_wangxl"
  local f2="${HOME}/misc/dotfiles/lib/.profile_wangxl_darwin"
  local f3="${HOME}/misc/dotfiles/lib/.profile_wangxl_linux"
  vim $f1 $f2 $f3
  cyanecho "sourcing ~/.profile_wangxl"
  source ${HOME}/.profile_wangxl
}
function ed_profile_darwin {
  edit_then_source ${HOME}/misc/dotfiles/lib/.profile_wangxl_darwin
}
function ed_profile_linux {
  edit_then_source ${HOME}/misc/dotfiles/lib/.profile_wangxl_linux
}
function up_profile {
  cyanecho "sourcing ${HOME}/.profile_wangxl"
  source ${HOME}/.profile_wangxl
  cyanecho "sourcing ${HOME}/.tmux.conf"
  tmux source-file ${HOME}/.tmux.conf
}
alias darwin_help="cat ~/misc/scripts/darwin_help.txt"
##----------------------------== tmux conf, tmp ==----------------------------##
alias ed_tmux="vim ~/.tmux.conf; tmux source-file ~/.tmux.conf"
function init_tmux_tpm {
  if [[ ! -d ~/.tmux/plugins/tpm/.git ]] && \
    [[ ! -f ~/.tmux/plugins/tpm/.git ]]; then
      git clone git@github.com:tmux-plugins/tpm ~/.tmux/plugins/tpm
      redecho "\n\tRead about tmux tpm configuration for tmp" \
        " at https://github.com/tmux-plugins/tpm\n"
              cyanecho "prefix + I : install new plugins"
              cyanecho "prefix + U : updates plugin(s)"
              cyanecho "prefix + alt + u : remove/uninstall plugins not on the list"
  fi
}
alias up_tmux_tpm="init_tmux_tpm; ~/.tmux/plugins/tpm/bin/install_plugins"
alias clean_tmux_tmp="init_tmux_tpm; ~/.tmux/plugins/tpm/bin/clean_plugins"
alias enter_tmux="tmux new -AD -s $(hostname -s)-main"
##-------------------------------== git:misc ==-------------------------------##
function ed_misc {
  local diff_cmd=" | vertical all | windo diffthis"
  local cmd1='args ~/misc/dotfiles/lib/.profile_wangxl | '
  cmd1+='bel split ~/misc/dotfiles/lib/.profile_wangxl_darwin | '
  cmd1+='bel vsplit ~/misc/dotfiles/lib/.profile_wangxl_linux | wincmd w'
  local cmd2='e ~/misc/dotfiles/lib/.tmux.conf'
  local cmd3='e ~/misc/dotfiles/lib/.vimrc |'
  cmd3+='bel vsplit ~/misc/dotfiles/lib/.vimrc.bundles'
  vim -c "$cmd1" -c "tabnew" \
    -c "$cmd2" -c "tabnew" \
    -c "$cmd3" -c "tabn1"

  cyanecho "sourcing ~/.profile_wangxl"
  source ${HOME}/.profile_wangxl
  cyanecho "sourcing ~/.tmux.conf"
  tmux source-file ${HOME}/.tmux.conf
}
function up_misc {
  pushd ${HOME}/misc > /dev/null
  if [[ -z $(git status --porcelain) ]]; then
    ggpur
  else
    xg_st
    redecho "There is uncommitted changes. Abort..."
  fi
  popd > /dev/null
}
function ed_scripts {
  local f1="${HOME}/misc/scripts/setup_symlinks.sh"
  local f2="${HOME}/misc/scripts/quick_install.sh"
  vim $f1 $f2
}
function up_symlinks {
  local opt=""
  [[ $(uname) == "Darwin" ]] && opt="darwin"
  [[ $(uname) == "Linux" ]] && opt="linux"
  cyanecho "setup symlinks for $opt"
  ${HOME}/misc/scripts/setup_symlinks.sh $opt --no-confirm
}
##--------------------------------== vundle ==--------------------------------##
# oh-my-zsh/plugins/vundle/vundle.plugin.zsh
# https://github.com/VundleVim/Vundle.vim
function init_vundle {
  if [[ ! -d ~/.vim/bundle/Vundle.vim/.git ]] && \
    [[ ! -f ~/.vim/bundle/Vundle.vim/.git ]]; then
      git clone git@github.com:VundleVim/Vundle.vim.git \
        ~/.vim/bundle/Vundle.vim
              redecho "\n\tRead about vim configuration for vundle" \
                " at https://github.com/VundleVim/Vundle.vim\n"
  fi
}
alias up_vundle="init_vundle; vim +PluginInstall +qall"
alias update_vundle="init_vundle; vim +PluginInstall! +qall"
alias clean_vundle="init_vundle; vim +PluginClean! +qall"
alias cd_vundle="cd ~/.vim/bundle"
function build_vundle_ycm {
  if [[ $(uname) == "Darwin" ]]; then
    pushd . RNUL
    cd ~/.vim/bundle/YouCompleteMe
    ./install.py --all
    popd RNUL
  else
    pushd . RNUL
    local build_dir="${HOME}/.vim/ycm_build"
    mkdir $build_dir
    cd $build_dir
    LDFLAGS="-L/usr/local/lib -Wl,-rpath=/usr/local/lib" \
      cmake -G "Unix Makefiles" \
      -DEXTERNAL_LIBCLANG_PATH="${HOME}/llvm/build/lib/libclang.so" . \
      ~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp
          cmake --build . --target ycm_core --config Release
          popd RNUL
          /bin/rm -rf $build_dir
  fi
}
##----------------------------------== npm ==---------------------------------##
function init_npm {
  if [[ ! -e /data/users/$USER/bin/npm ]]; then
    redecho "init npm for the first time"
    # https://fburl.com/wiki/8vcb76n3
    fbpkg fetch node-8.11.1
    npm config set http-proxy http://fwdproxy:8080
    npm config set https-proxy http://fwdproxy:8080
    # npm config set prefix="/data/users/$USER"
  fi
}
function npm {
  init_npm
  PATH=/data/users/$USER/bin:$PATH command npm $@
}
function remark {
  if [[ ! -e /data/users/$USER/bin/remark ]]; then
    redecho "init remark for the first time"
    npm install -g --prefix . --save-dev remark-cli remark-preset-lint-recommended
  fi
  PATH=/data/users/$USER/bin:$PATH command remark $@
}
##------------------------------== oh-my-zsh ==-------------------------------##
function init_oh_my_zsh {
  if [[ ! -d ~/.oh-my-zsh/.git ]] && \
    [[ ! -f ~/.oh-my-zsh/.git ]]; then
      sh -c "$(curl -fsSL \
        https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
              redecho "\n\tRead about oh-my-zsh" \
                " at https://github.com/robbyrussell/oh-my-zsh\n"
                            else
                              greenecho "\n\toh-my-zsh is already installed. Skipping..."
  fi
  local zsh_custom="${HOME}/.oh-my-zsh/custom/plugins"
  function install_custom_plugin() {
    local url="git@github.com:$1/$2"
    local plugin=${3:=$2}
    echo $plugin
    if [[ ! -e $zsh_custom/$plugin/.git ]]; then
      echo "git clone $url $zsh_custom/$plugin"
      git clone $url $zsh_custom/$plugin
      redecho "\n\tRead about $plugin at $url"
    else
      greenecho "\n\tCustom Git Plugin $1/$2 is already installed. Skipping..."
    fi
  }
  install_custom_plugin zsh-users zsh-completions
  install_custom_plugin zsh-users zsh-autosuggestions
  install_custom_plugin zsh-users zsh-syntax-highlighting
  install_custom_plugin Tarrasch zsh-bd bd
}
function up_oh_my_zsh {
  init_oh_my_zsh
  upgrade_oh_my_zsh
  pushd ~/.oh-my-zsh/custom/plugins/zsh-completions RNUL
  git pull --rebase
  popd > /dev/null
  pushd ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions RNUL
  git pull --rebase
  popd > /dev/null
}
##------------------------------== git repo download ==-----------------------##
function git_clone {
  local gh=$1
  local repo=$2
  local dest=$3
  local name=${4:=$repo}

  local url=git@github.com:$gh/$repo
  if [[ ! -e $dest/$name/.git ]]; then
    makedir -p $dest
    echo "git clone $url $dest/$name"
    git clone $url $dest/$name
    redecho "\n\tRead about $name at $url"
  else
    greenecho "\n\tGit Repo $gh/$repo is already installed. Skipping..."
  fi
}
function pkg_clone {
  mkdir -p ~/workspace > /dev/null 2>&1
  cd ~/workspace
  git clone git@github.com:dosentmatter/lolcat
  cd lolcat
  make && sudo make install
}
##---------== update homebrew, oh-my-zsh, pip and source profile==------------##
function update_scripts {
  redecho "upgrade oh-my-zsh"
  up_oh_my_zsh
  if [[ $(uname) == "Darwin" ]]; then
    redecho "brew update"
    brew update
    redecho "brew outdated"
    brew outdated
    redecho "brew upgrade"
    brew upgrade
    redecho "brew cask update"
    brew cask update
    redecho "brew cask cleanup"
    brew cask cleanup
    redecho "brew cleanup"
    brew cleanup
    redecho "pip install --upgrade pip"
    pip install --upgrade pip
    # yellowecho "pip update package"
    # pip freeze --local | grep -v '^\-e' | cut -d = -f 1  |\
    # xargs -n1 pip install -U
  fi
  redecho "installing misc packages"
  pkg_clone
  redecho "vundle update"
  up_vundle
  redecho "vundle clean"
  clean_vundle
  redecho "tmux tpm update"
  up_tmux_tpm
  redecho "tmux tpm clean"
  clean_tmux_tmp

  if [[ $(uname) == "Linux" ]]; then
    redecho "git clone facebook/PathPicker.git"
    git_clone facebook PathPicker ~/local fpp
    sudo ln -s ~/local/fpp/fpp /usr/local/bin/fpp
  fi

  redecho "source tmux conf"
  tmux source ${HOME}/.tmux.conf
  redecho "source profile_wangxl"
  source ${HOME}/.profile_wangxl

}

## ========================================================================== ##
#                     ________      _______. __    __                          #
#                    |       /     /       ||  |  |  |                         #
#                    `---/  /     |   (----`|  |__|  |                         #
#                       /  /       \   \    |   __   |                         #
#                      /  /----.----)   |   |  |  |  |                         #
#                     /________|_______/    |__|  |__|                         #
## ========================================================================== ##
if [[ $options[extended_glob] == off ]]; then setopt extended_glob; fi
# Enable hidden files completion
# https://github.com/robbyrussell/oh-my-zsh/pull/4489#issuecomment-196992974
_comp_options+=(globdots)

# copied from meyering
setopt HIST_FIND_NO_DUPS
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_REDUCE_BLANKS
setopt HIST_SAVE_NO_DUPS
setopt INC_APPEND_HISTORY

## ========================================================================== ##
#                      _______  __  .___________.                              #
#                     /  _____||  | |           |                              #
#                    |  |  __  |  | `---|  |----`                              #
#                    |  | |_ | |  |     |  |                                   #
#                    |  |__| | |  |     |  |                                   #
#                     \______| |__|     |__|                                   #
## ========================================================================== ##
function xg_sl {
  local option=""
  # by default, zsh does not split word
  # three ways to enable spliting safely
  # ${=a}
  # ${(@s: :)a} ## retain empty strings with @
  # eval "(${a})"
  if [[ $# -eq 0 ]]; then option="-10"; else eval "option=(${@})"; fi
  # replace -10 with --all
  # git --no-pager log $option --stat --branches --graph --decorate --all
  local format="" # commit, date, branches, subject, author
  format="%C(bold cyan)%h%Creset - %Cred%aD%Creset "
  format+="%C(bold green)(%ar)%C(reset) %C(auto)%d%Creset%n"
  format+=" %C(yellow)%s%Creset %C(bold white)by%Creset "
  format+="%C(bold blue)%an%Creset"
  git --no-pager log \
    --abbrev-commit --stat --stat-graph-width=60 --graph --decorate --all \
    --pretty=tformat:$format \
    $option

#
}
function xg_sll { # long
  # get remote unpulled changes
  git fetch
  local format="" # commit, date, branches, subject, author
  format="%C(bold cyan)%h%Creset - %Cred%aD%Creset "
  format+="%C(bold green)(%ar)%C(reset) %C(auto)%d%Creset%n"
  format+="%C(yellow)%s%Creset %C(bold white)by%Creset "
  format+="%C(bold blue)%an%Creset"
  format+="%C(auto)%+b%Creset"
  git log \
    --abbrev-commit --stat --stat-graph-width=60 --graph --decorate --all \
    --pretty=tformat:$format

  #
}
function _xg_sls {
  local pager_option=""
  [[ $1 == "--no-pager" ]] && pager_option="--no-pager"
  local format=""
  format="%C(bold cyan)%h%Creset - %C(bold green)(%ar)%Creset " # commmit, date
  format+="%C(yellow)%s%Creset %C(bold white)by%Creset "        # subject
  format+="%C(bold blue)%an%Creset %C(auto)%d%Creset"           # author, decor
  git $pager_option log \
    --abbrev-commit --graph --decorate --all --pretty=tformat:$format "${@:2}"

  #
}
function xg_sls { # short
  local option=""
  if [[ $# -eq 0 ]]; then option="-20"; else eval "option=(${@})"; fi
  _xg_sls --no-pager $option
}
function xg_slo { # outgoing
  git fetch
  _xg_sls --no-pager $@ origin/master..
}
function xg_sli { # incoming
  git fetch
  _xg_sls --no-pager $@ ..origin/master
}
function xg_slf { # show changes against file/directory, alternativ: gitk
  if [[ $# == 0 ]]; then
    _xg_sls --pager --full-diff -p
  else
    _xg_sls --pager -p $@
  fi
}
function xg_slf5 { # show changes against file/directory, last 5 changes only
  if [[ $# == 0 ]]; then
    _xg_sls --no-pager -5 --full-diff -p
  else
    _xg_sls --no-pager -5 -p $@
  fi
}
function xg_ls {  # list all file tracked under master
  git ls-tree -r --name-only ${@:-HEAD}
}
alias xg_ls_ignored="git ls-files --ignored --exclude-standard --others"
alias xg_ls_untracked="git ls-files --exclude-standard --others"
alias xg_st='git status'
alias xg_fetch_st='git fetch; git status;'
function xg_rm_last_commit {
  local ans=""
  redecho -n "Delete Last Commit [Y/N]? "
  read ans
  ans=$(echo ${ans} | tr "[:upper:]" "[:lower:]")
  if [[ $ans == yes || $ans == y ]]; then
    cyanecho "deleting..."
    git reset --hard "HEAD^"
  else
    cyanecho "do nothing, exit..."
  fi
}
alias xg_rk_last_commit='git reset --soft "HEAD^"'
alias xg_browse='hub browse'
alias xg_list_remote_repo_branch='git ls-remote origin'
alias xg_show_remote_repo='git remote show origin'
alias xg_dry_run_featch='git fetch --dry-run'
function xg_check_remote_up_2_date {
  if [[ -z $(git fetch --dry-run 3>&2 2>&1 1>&3) ]]
  then
    cyanecho "Git: up to date"
  else
    redecho "Git: need update"
  fi
}
alias xg_diff="git diff HEAD"
alias xg_ddiff='git diff "HEAD^"'
alias xg_ca="git commit -v -a --amend --no-edit"
function xg_clone {
  git clone git@github.com:$(git config github.user)/$1.git
}
function github_short_url {
  curl -isS https://git.io -F "url=$1" | sed -rn 's/^Location: (.*)$/\1/p'
}
function github_short_url_to_clipboard {
  local url="$(github_short_url $1)"
  echo $url | pbcopy
  echo $url
}
# dev git proxy
alias extgit='git -c http.proxy=fwdproxy:8080 -c'`
`'core.gitproxy=$HOME/bin/git-proxy-wrapper'

## ========================================================================== ##
#             .______   .______      ___________    __    ____                 #
#             |   _  \  |   _  \    |   ____\   \  /  \  /   /                 #
#             |  |_)  | |  |_)  |   |  |__   \   \/    \/   /                  #
#             |   _  <  |      /    |   __|   \            /                   #
#             |  |_)  | |  |\  \----|  |____   \    /\    /                    #
#             |______/  | _| `._____|_______|   \__/  \__/                     #
## ========================================================================== ##
# homebrew api token
if [[ $(uname) == "Darwin" ]] && [[ -n "$(which brew 2>/dev/null)"  ]]; then
  if [[ -f  ~/Dropbox/Tools/secrets/homebrew_github_api_token ]]; then
    export HOMEBREW_GITHUB_API_TOKEN=$(cat \
      ~/Dropbox/Tools/secrets/homebrew_github_api_token)
        else
          redecho "cannot find file ~/Dropbox/Tools/secrets/homebrew_github_api_token"
          redecho "fix dropbox missing problem"
  fi
fi

## ========================================================================== ##
#                   .___  ___.  __       _______.  ______                      #
#                   |   \/   | |  |     /       | /      |                     #
#                   |  \  /  | |  |    |   (----`|  ,----'                     #
#                   |  |\/|  | |  |     \   \    |  |                          #
#                   |  |  |  | |  | .----)   |   |  `----.                     #
#                   |__|  |__| |__| |_______/     \______|                     #
## ========================================================================== ##
alias run_matlab="matlab -nodesktop -nosplash -r"
# alias mosh="mosh --family=prefer-inet6"
alias mosh="x2ssh -et"
export EDITOR="vim"
function yapf {
  $(whence -p yapf) \
    --style="{based_on_style:facebook,indent_width:4,column_limit:79}" $@

#
}
# alias killall="eden start; killall -u $USER"
if [[ $(uname) == "Linux" ]]; then
  alias killall="loginctl terminate-user $USER"
fi
alias ka="\killall -u $USER" #  disables the alias in interactive shell
alias upld="${HOME}/misc/scripts/sync.sh"
alias tty_sane="stty sane"
function short_hostname {
  hostname | sed -r 's/\./ /g' | awk '{ if (NF > 1) print $1"."$2; else print $1; }'
}

## ========================================================================== ##
#     __  .______   ____    ____ .___________.__    __    ______   .__   __.   #
#    |  | |   _  \  \   \  /   / |           |  |  |  |  /  __  \  |  \ |  |   #
#    |  | |  |_)  |  \   \/   /  `---|  |----|  |__|  | |  |  |  | |   \|  |   #
#    |  | |   ___/    \_    _/       |  |    |   __   | |  |  |  | |  . `  |   #
#    |  | |  |          |  |         |  |    |  |  |  | |  `--'  | |  |\   |   #
#    |__| | _|          |__|         |__|    |__|  |__|  \______/  |__| \__|   #
## ========================================================================== ##
function start_local_ipython {
  [[ $# == 1 ]] && { pushd $1; } || { pushd ${HOME}/Dropbox/workspace/ipython; }
  jupyter notebook --port=8889;
  popd;
}
function start_timan_tunnel { #silently starting
  ssh -N -f -L localhost:8889:localhost:8889 timan101
}
function start_dev_tunnel { #silently starting
  ssh -N -f -L localhost:8888:localhost:8888 dev
}
function kill_timan_tunnel_ipython {
  # quote the command substitution
  # stackoverflow.com/questions/31521221/zsh-local-keyword-not-an-identifier
  local pids="$(ps aux | \
    grep 'ssh -N -f -L localhost:8889:localhost:8889 timan101' | \
    awk '{print $2}')"
      for i in ${=pids};
      do
        local comm=$(ps -p $i -o comm=)
        if [[ $comm == ssh* ]]; then
          redecho "kill PID:($i) "$comm
          kill -9 $i
        fi
      done

#
}
function build_bento {
  buck build ${1:-@mode/opt} //experimental/xlwang:bento_kernel_devbig470_local
  yellowecho "start bento https://our.intern.facebook.com/intern/bunny/?bento " \
    "and select bento_kernel_devbig470_local"

#
}
# # A function to launch ipython notebooks
function ifbpynb {
  pushd ~/python;
  /usr/local/bin/ifbpy notebook --profile=nbserver;
  popd;
}
# # ai_bb
alias ai_bb="buck build -c fbcode.platform=gcc-4.9-glibc-2.20"
function itorch {
  pushd ~/fbcode;
  torch/fb/fbitorch/run.sh notebook --notebook-dir=~/notebooks --no-browser;
  popd;
}
# # Caffe2 ifbpy
function ifbpynb_c2 {
  pushd ~/fbcode
  # caffe2/caffe2/fb/ifbpy/run_ifbpy.sh
  ./fblearner/flow/projects/dper/notebook.sh
  popd
}
function ifb2pynb_c2 {
  # ipython_setup
  pushd ~/fbcode2
  # caffe2/caffe2/fb/ifbpy/run_ifbpy.sh
  ./fblearner/flow/projects/dper/notebook.sh
  popd
}
function ifb3pynb_c2 {
  pushd ~/fbcode3
  # caffe2/caffe2/fb/ifbpy/run_ifbpy.sh
  ./fblearner/flow/projects/dper/notebook.sh
  popd
}
function ifbpy_c2 {
  pushd ~/fbcode
  #!/bin/bash
  # This launches an ipython notebook. Usage:
  #    run_ifbpy.sh [slim]
  # Slim is without facebook dependencies so it compiles faster.

  TARGET=caffe2/caffe2/fb/ifbpy
  EXT=$1
  if [[ "$EXT" == "slim" ]]; then
    EXT="_slim"
  fi

  export OMP_NUM_THREADS=8

  # symb link the aiplatform files so that we can access them without exposing
  # the aiplatform gfsai path should we need to open source the tutorials.
  NOTEBOOKS=$HOME/caffe2_notebooks
  mkdir -p $NOTEBOOKS
  ln -sfT /mnt/vol/gfsai-oregon/aml/users/aiplatform $NOTEBOOKS/tutorial_data

  # We can't use buck run here because it will block all other attempts to build
  # with buck while ifbpy notebook is running.
  buck build @mode/opt -c fbcode.platform=gcc-4.9-glibc-2.20 \
    -c python.package_style=inplace \
    ${TARGET}:ifbpy${EXT}

  ./buck-out/gen/${TARGET}/ifbpy${EXT}.par
  popd
}
alias cat_flow_log='cat ~/fbcode/experimental/xlwang/ipy_flow_debug.log'
function less_flow_log {
  pygmentize -O full,style=monokai -l ocaml \
    ~/fbcode/experimental/xlwang/ipy_flow_debug.log | less -R +G
  }


## ========================================================================== ##
#                               _______ .______                                #
#                              |   ____||   _  \                               #
#                              |  |__   |  |_)  |                              #
#                              |   __|  |   _  <                               #
#                              |  |     |  |_)  |                              #
#                              |__|     |______/                               #
## ========================================================================== ##
# alias buck="greenecho \[\[buck2\]\]; buck2"
if [[ -d  ~/fbcode/search/typeahead/scripts ]]; then
  export PATH=~/fbcode/search/typeahead/scripts:$PATH
fi
if [[ -d ~/workspace ]]; then
  export PATH=~/workspace:$PATH
fi
export BUCKOUT="${HOME}/fbsource/buck-out/v2/gen/fbcode"
alias arc_lint="arc lint --engine HowtoevenLintEngine"
alias arc_up_msg="hg commit --amend && arc diff --verbatim"
alias arc_stack_diff="for-each-stacked submit-stacked-diff"
function hnext {
  hg next $@
  # local num=${1:=1}
  # for i in $(seq 1 $1);
  # do
  #   hg next
  # done
}
function hprev {
  hg prev $@
  # local num=${1:=1}
  # for i in $(seq 1 $1);
  # do
  #   hg prev
  # done
}
alias hnext1='hnext 1'
alias hnext2='hnext 2'
alias hnext3='hnext 3'
alias hprev1='hprev 1'
alias hprev2='hprev 2'
alias hprev3='hprev 3'
alias hs_cur_rev="hg log -T '{xg_sl}' -l 1"
alias hum="hg up master && hs_cur_rev"
alias hus="hg up stable && hs_cur_rev"
alias hut='hg up tip && hs_cur_rev'
function hud {
  # alias hud="hg up -r 'draft()'"
  # hg up -r "limit(sort(draft() and head(), -date), ${1:=1})"
  hg up -r "limit(sort(draft(), -topo), ${1:=1})"
  [[ $? -eq 0 ]] && hs_cur_rev
}
function hudls {
  mkdir -p ~/tmp
  tmp_hs=~/tmp/hs
  script --flush --quiet --return \
    $tmp_hs --command "hg --pager never smartlog -T '{xg_sl}'" 2>/dev/null 1>&2


  # hd=$(hg log -T '{sl_node_info}\n' -r "sort(draft() and head(), -date)")
  hd=$(hg log -T '{sl_node_info}\n' -r "sort(draft(), -topo)")
  id=0
  for f in "${(f)hd}"; do
    id=$((id+1))
    sed -i "s/$f/>>>[${id}]<<<: ${f}/" $tmp_hs
  done
  cat $tmp_hs | sed 1d | sed '$d'
  /bin/rm $tmp_hs

  print -s "hud "

  # hs
  # hg log -T '{xg_sl}' -r "sort(draft() and head(), -date)" --color always | \
  #   awk -v num=3 'FNR % num == 1 {print "\033[1;32m["++q"]\033[0m" ORS $0;next} 1'
  # print -s "hud "

#
}
alias hudl="hg log -r 'draft() and head()'"
alias hud1='hud 1'
alias hud2='hud 2'
alias hud3='hud 3'
alias hu="hg up"
# alias hush='hg up -r "first(. % master)" && hs_cur_rev' # jump to stack first rev
alias hush='hg bottom'
# alias hust='hg up -r ".::" && hs_cur_rev' # jump to stack last rev
alias hust='hg top'
alias ha="hg add"
alias hc="hg commit"
alias hc!="hg amend --rebase"
alias hca="hg add; hg commit"
alias hca!="hg add; hg amend --rebase"
alias hcn="hg --config ui.allowemptycommit=True commit"
alias hed="hg commit --amend"
alias hls="hg log --stat -l1"
alias hlsf="hg log --stat -l1 | fpp"
# need to refresh for missing lines in tmux
function hs {
  [[ -z $(hg root 2>/dev/null) ]] && {cd ~/fbcode; tmrn fbc}
  hg st && hg smartlog -T '{xg_sl}';
  [[ -n $TMUX ]] && tmux refresh-client
  [[ $1 == "-l" ]] && jf list --status CLOSED -l 10
}
function hsh {
  [[ -z $(hg root 2>/dev/null) ]] && {cd ~/fbcode; tmrn fbc}
  hg smartlog -T '{xg_sl}' -r 'lost()';
  [[ -n $TMUX ]] && tmux refresh-client
}
function hfs {
  [[ -z $(hg root 2>/dev/null) ]] && {cd ~/fbcode; tmrn fbc}
  hg st && hg fsl -T '{xg_sl}';
  [[ -n $TMUX ]] && tmux refresh-client
}
function hfss {
  [[ -z $(hg root 2>/dev/null) ]] && {cd ~/fbcode; tmrn fbc}
  hg st && hg fssl -T '{xg_sl}';
  [[ -n $TMUX ]] && tmux refresh-client
}
function hdh {
  cd $(hg root)
  hg diff -r ".^" $@
  local ret_code=$?
  [[  -z $(hg diff -r ".^" $@ 2>&1 | grep "No such file or directory")  ]]
  local empty=$?
  cd - > /dev/null 2>&1
  if [[ $ret_code != 0 || $empty != 0 ]]; then
    hg diff -r ".^" $@
  fi
}

alias hsu="{ hg-sl-up -T '{xg_sl_up}' } && hs_cur_rev"
alias hst="hg st; hg log -T '{xg_sl_no_newline}' -r ."
alias hsl=" hg smartlog -T '{xg_sl}'"
alias hsf="hg st | fpp"
alias hd='hg diff'
alias hsd='hg icdiff --pager=yes --config pager.pager="LESS=FRKX less"'
alias hsdh='hg icdiff --pager=yes --config pager.pager="LESS=FRKX less" -r ".^"'
alias hdjf='hg diff --since-last-submit'
alias hhl='hg pull'
alias hhp='arc diff'
alias hrb='hg rebase'
alias hrbm='hg rebase -d master'
alias hrbt='hg rebase -d tip'
alias hid='hg id -i'
alias hg_query_author="hg log -r . --template '{sl_user}'"
alias hg_query_diff="hg log -r . --template '{sl_diff_super}'"
alias hld="hg log --rev . --template '{phabdiff}'"
alias hrf='hhl && arc cleanup-features && hum && hs'
alias har='hg addremove'
function hrv {
  cwd=$(pwd)
  cd $(hg root)
  hg revert "$@"
  cd $cwd
}
alias hrvh='hg revert -r ".^"'
alias hprune='hg prune'
alias hpurge='hg purge'
alias hmsg='arc amend --show 2>/dev/null || hg log -T {desc} --rev .'
alias hg_latest_publish_commit="hg log -r 'first(reverse(::.) & public())' -T '{node}'"
alias hg_current_commit="hg log -r '.' -T '{node}'"
alias hfd='hg fold --exact --rev . --rev ".^"' # hg fold --from .^
alias hhe='hg histedit'
alias hab='hg absorb'
function hg_cleanup {
  revs=$(hg log -r 'draft()' -T '{sl_node_info} {phabstatus}\n' \
    | grep -E 'Committed|Abandoned' | awk '{print $1}')

  [[ -z "$revs"  ]] && return 1

  for r in "${(@f)revs}"; do
    hg log -r $r -T '{xg_sl}'
    if [[ $# -eq 0 ]]; then
      redecho "hg strip -r $r"
      hg strip -r $r
      echo ""
    fi
  done

#
}
function hhpur {
  hhl
  # hush > /dev/null 2>&1
  # hrbm -s .
  hrbm
  arc cleanup-features
  hs
}
function hg_authors {
  # hg --pager=off log --template "{xg_sl_authors}" -- ${1:-$(pwd)}
  hg log --template "{xg_sl_authors}" -- ${1:-$(readlink -f .)}
}
function hg_reviewers {
  # hg log -T '{desc}' --rev ${1:-"."} | grep "^Reviewers"
  arc amend --show | grep "^Reviewers: "
}
function hg_files {
  hg log --template "{xg_sl_files}" -- ${1:-$(readlink -f .)}
}
function hg_stack_query {
  local current=$(hg id --rev .)
  local master=$(hg id --rev master)
  local cnt=0
  while :; do
    echo $(hg log -T $@ --rev .)
    hg prev 2>/dev/null 1>&2
    local id=$(hg id --rev .)
    if [[ $id == $master ]]; then
      hg up --rev $current 2>/dev/null 1>&2
      return 0
    fi
    cnt=$((cnt + 1))
    if [[ $cnt -ge 10 ]]; then
      hg up --rev $current 2>/dev/null 1>&2
      return 1
    fi
  done
}
alias hg_rev_date="hg log -T '{sl_date}, [{date}]' --rev"
alias hg_rev_author="hg log -T '{author|user}' --rev"
function hlk {
  local diff=$(hld)
  if [[ -z ${diff} ]]; then
    redecho "abort: no diff found"
    return 1
  fi
  echo "https://our.intern.facebook.com/intern/diff/${diff}/"
}
function diff_test {
  if [[ $@ == 'help' ]]; then
    redecho "List of options:"
    echo "  tmux    : load tests to tmux buffer"
    echo "  gen     : generate tests from tmp file"
    echo "  delete  : delete tests"
    echo "  list    : list tests"
    echo "  edit    : edit test file"
    return 0
  fi
  local diff=$(hld)
  local author=$(hg_rev_author .)
  [[ ${author} == $(whoami) ]] && diff=${diff:=${author}}
  if [[ ${#diff} -eq 0 ]]; then
    redecho "abort: diff number not found"
    return 1
  fi
  local test_file="${HOME}/fbcode/experimental/xlwang/${diff}.test"
  local tmp_file="${HOME}/fbcode/experimental/xlwang/$(whoami).test"
  touch $test_file
  if [[ $@ == 'tmux' ]]; then
    echo "LOAD TESTS TO TMUX BUFFER:"
    echo "========================="
    greenecho "$(cat $test_file)"
    cat $test_file | strip_color | tmux loadb -
    return 0
  fi
  yellowecho "DIFF    = ${diff}"
  yellowecho "TEST    = ${test_file}"
  if [[ $@ == 'gen' ]]; then
    echo "GENERATE TESTS:"
    echo "==============="
    touch $tmp_file
    mv $tmp_file $test_file
    greenecho "$(cat $test_file)"
    redecho "moving $(whoami) => ${diff}"
    return 0
  elif [[ $@ == 'delete' ]]; then
    echo "DELETE TESTS:"
    echo "============="
    greenecho "$(cat $test_file)"
    redecho "delete test $test_file"
    /bin/rm $test_file
    return 0
  elif [[ $@ == 'list' ]]; then
    echo "LIST TESTS:"
    echo "==========="
    greenecho "$(cat $test_file)"
    return 0
  elif [[ $@ == 'edit' ]]; then
    vim $test_file
    return 0
  fi
  if [[ $# -eq 0 ]]; then
    local test_number=$(cat $test_file | wc -l)
    if [[ $test_number -eq 0 ]]; then
      redecho "abort: no tests found!"
    else
      echo "RUNNING TESTS:"
      echo "==============="
      greenecho "$(cat $test_file)"
      echo ""
    fi
    for x in "${(f)$(cat $test_file)}"; do
      if [[ ! -z $x ]]; then
        local cmd="bbt $x"
        cyanecho "${cmd}"
        eval ${cmd}
        local rv=$?
        # neither success nor has skip
        if [[ $rv -ne 0 && $rv -ne 64 ]]; then
          redecho "abort: test $x failed with return value $rv!"
          return 1
        fi
      fi
    done
  else
    for x in "${(f)$(cat $test_file)}"; do
      if [[ ! -z $x ]]; then
        if [[ "$*" == "$x"* ]]; then
          cyanecho "test" "$x" "is already added"
          echo "EXISTING TESTS:"
          echo "==============="
          greenecho "$(cat $test_file)"
          local cmd="bbt $*"
          cyanecho "${cmd}"
          eval ${cmd}
          return 0
        fi
      fi
    done
    greenecho "add test" "$@" "to test file" "$test_file"
    echo "$@" >> $test_file
    echo "EXISTING TESTS:"
    echo "==============="
    greenecho "$(cat $test_file)"
    local cmd="bbt $@"
    cyanecho "${cmd}"
    eval ${cmd}
  fi
}
opt="opt-clang-thinlto"
opt="opt-split-dwarf"
alias dtt="diff_test"
alias hg_help="cat ~/misc/scripts/hg_help.txt"
alias flow_help="cat ~/misc/scripts/flow_help.txt"
alias dev_help="cat ~/misc/scripts/dev_help.txt"
alias buck='buck2'
alias bbt='buck test'
alias bbto="buck test @mode/$opt"
alias bbtd="buck test @mode/devo-nosan"
alias b1btd="/usr/local/bin/buck test @mode/devo-nosan"
alias bbb='buck build --show-output'
alias bbbo="buck build --show-output @mode/$opt"
alias bbbd="buck build --show-output @mode/devo-nosan"
alias b1bbd="/usr/local/bin/buck build --show-output @mode/devo-nosan"
alias bua='buck_util add'
alias bbr='buck run'
alias bbro="buck run @mode/$opt"
alias bbrd="buck run @mode/devo-nosan"
alias b1brd="/usr/local/bin/buck run @mode/devo-nosan"
function tmrn {
  if [[ -n $TMUX ]]; then
    tmux setw allow-rename off
    tmux rename-window $1
  fi
}
alias misc='cd ~/misc; tmrn misc'
alias fbc='cd ~/fbcode; tmrn fbc'
alias fbc1='cd ~/fbcode'
alias fbc2='cd ~/fbcode2'
alias fbc3='cd ~/fbcode3'
alias exp="cd ~/fbcode/scripts/xlwang; tmrn exp"
alias cconf='cd ~/configerator; tmrn cconf'
alias buckout='cd $BUCKOUT; tmrn buckout'
alias www='cd ~/www; tmrn www'
alias igsrv='cd ~/instagram-server; tmrn igsrv'
alias dsi='cd ~/configerator-dsi; tmrn dsi'
alias ds='cd ~/fbcode/dataswarm-pipelines/tasks; tmrn ds'
alias dsb='cd ~/fbcode/dataswarm-pipelines; tmrn dsb'
alias nbf='cd ~/fbcode/dataswarm-pipelines; ./nbackfill3 --remote'
alias vimcpp='vim ~/misc/scripts/cpp_notes.md'
function nbfq {
  cd ~/fbcode/dataswarm-pipelines;
  ./nbackfill --yes-i-know-what-im-doing --remote "$@"
}
alias jfe="jf s && hed"
alias jfp="jf s --update-fields && jf publish"
alias jfep="jfe && jfp"
alias jfs="jf s"
alias jfss="jf s --stack"
alias jfsss="jf s -r bottom::top"
alias jfu="jf s --update-fields"
alias jfll='jf list --status CLOSED -l 10'
alias abac="arc build && arc canary --ttl 86400"
function jfulpng {
  mkdir -p /tmp/$(whoami) > /dev/null 2>&1
  pngpaste /tmp/$(whoami)/tmp.png
  unbuffer jf upload /tmp/$(whoami)/tmp.png |  tee /tmp/$(whoami)/paste.txt
  cat /tmp/$(whoami)/paste.txt | sed -rn "s/.*([{]F[[:digit:]]+[}]).*/\1/p" | pbcopy
}
alias ablac="arc build --legacy && arc canary --ttl 86400"
alias acls="arc canary --list"
alias acch="arc canary --cancel-host $(hostname)"
alias al="arc lint"
alias alc="arc lint -e extra --take CLANGTIDY"
function prp {
  # local files=$(hg status --change . | awk '{ print $2 }' | grep '.py$')
  # arc pyre check-owning-targets ${(f)files}
  arc pyre check-changed-targets
}
function prfm {
  # local files=$(hg status --change . | awk '{ print $2 }' | grep '.py$')
  # arc pyre check-owning-targets --output=json ${(f)files} | pyre-upgrade fixme
  arc pyre check-changed-targets --output=json | pyre-upgrade fixme

}
alias alpr="al && prp"
# alias prfm="pyre --output=json | pyre-upgrade fixme"
# alias prp="pyre --output=text"
alias canary_workflow='~/misc/scripts/canary_workflow.sh'
alias fbsf='/usr/local/bin/sf'
function tmp {
  mkdir -p /tmp/$(whoami) > /dev/null 2>&1
  cd ~/tmp
}
function flow_script {
  vim ~/misc/scripts/flow_script.py
}
function fb_latest_pkg {
  fbpkg versions "$*" --no-ephemerals | grep DEFAULT | cut -d' ' -f1
}
function fbpkg_rev_log {
  hg log -r $(fbpkg info $@ | grep Revision | awk '{ print $2 }')
}
function fbpkg_uprev_log {
  hg log -r $(fbpkg info $@ | grep Upstream: | awk '{ print $2 }')
}
function fbpkg_rev_up {
  rev=$(fbpkg info $@ | grep Revision | awk '{ print $2 }')
  yellowecho "rev: $rev"
  hg up -r "$rev"
}
function fbtmux {
  fbc2
  tmux new-window -t 2 -c $(readlink -f ~/fbcode)
  tmux new-window -t 3 -c $(readlink -f ~/fbcode)
  tmux new-window -t 4 -c $(readlink -f ~/fbcode3)
  tmux setw -t 1 allow-rename off
  tmux rename-window -t 1 "ipy"
  tmux setw -t 2 allow-rename off
  tmux rename-window -t 2 "fbc"
  tmux setw -t 3 allow-rename off
  tmux rename-window -t 3 "run"
  tmux setw -t 4 allow-rename off
  tmux rename-window -t 4 "fbc3"
  tmux send-keys -t 1.1 "tmux split-window -t 1.1" C-m
  tmux send-keys -t 1.1 "tmux send-keys -t 1.2 ifb2pynb_c2 C-m" C-m
  tmux send-keys -t 1.1 \
    "tmux send-keys -t 1.1 -R; tmux clear-history -t 1.1" C-m

  tmux send-keys -t 1.1 "happy_coding" C-m

}
function tmux_fbc {
  tmux new-window -c $(readlink -f ~/fbcode) \
    && tmux setw allow-rename off \
    && tmux rename-window "fbc"

#
}
function tmux_fbc2 {
  tmux new-window -c $(readlink -f ~/fbcode2) \
    && tmux setw allow-rename off \
    && tmux rename-window "fbc2"

#
}
function tmux_fbc3 {
  tmux new-window -c $(readlink -f ~/fbcode3) \
    && tmux setw allow-rename off \
    && tmux rename-window "fbc3"

#
}
function tmux_ds {
  tmux new-window -c $(readlink -f ~/fbcode/dataswarm-pipelines/tasks) \
    && tmux setw allow-rename off \
    && tmux rename-window "ds"

#
}
function tmux_cconf {
  tmux new-window -c $(readlink -f ~/configerator) \
    && tmux setw allow-rename off \
    && tmux rename-window "cf"

#
}
function run_dper_integration_tests {
  pushd ~/fbcode

  cyanecho """
  ~/fbcode/fblearner/flow/run_integration_tests
  --mode opt
  --timeout 7200
  --entitlement 'integration_tests'
  --owner fblearner_realtime
  --project-name aml.dper2
  """

  ~/fbcode/fblearner/flow/run_integration_tests \
    --mode opt \
    --timeout 7200 \
    --entitlement 'integration_tests' \
    --owner fblearner_realtime \
    --project-name aml.dper2 $@

  popd
}
function happy_coding {
  local happy=$(cat ~/misc/scripts/happy_coding.txt | head -n 9)
  local coding=$(cat ~/misc/scripts/happy_coding.txt | tail -n 10)
  cyanecho $happy
  yellowecho $coding
}
function buck_gen_cc {
  buck build --show-output $1\#compilation-database

#
}
alias buck_util='~/misc/scripts/buck_utils.py'
function flow_util {
  local bin=~/fbcode/buck-out/gen/experimental/xlwang/flow_util.par
  local pyf=~/fbcode/experimental/xlwang/flow_util.py
  local src=~/misc/scripts/flow_util.py
  cur_pwd=$(pwd)
  if [[ ! -e "$bin" ]]; then
    redecho "missing $bin! build!"
    if [[ ! -e "$pyf" ]]; then
      if [[ ! -e "$src" ]]; then
        redecho "$src does not exist! abort!"
        exit
      fi
      ln -s "$src" "$pyf"
    fi
    cd ~/fbcode
    buck build //experimental/xlwang:flow_util
    cd $cur_pwd
  fi
  "$bin" $@
}
function get_duf {
  local f=$1
  f=$(readlink -f ${f})
  local u
  if [[ ${f} == *fbcode* ]]; then
    u="https://phabricator.intern.facebook.com/diffusion/FBS/browse/master/"
    u+="fbcode/"
    u+=$(echo ${f} | sed 's/.*fbcode\/\(.*\)/\1/')
  fi
  echo $u
}
function get_blamef {
  local f=$1
  f=$(readlink -f ${f})
  local u
  if [[ ${f} == *fbcode* ]]; then
    u="https://phabricator.intern.facebook.com/diffusion/FBS/browse/master/"
    u+="fbcode/"
    u+=$(echo ${f} | sed 's/.*fbcode\/\(.*\)/\1/')"?blame=1"
  fi
  echo $u
}
# bookmark management v (z is oh-my-zsh plugin)
# [ -f ~/misc/scripts/v.sh ] && source ~/misc/scripts/v
# alias v="~/misc/scripts/v"
# zsh
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

function up_fzf {
  if [[ ! -e ~/.fzf ]]; then
    redecho "fzf does not exist!"
    exit 1
  fi
  local cwd=$(pwd)
  cd ~/.fzf
  git pull && ./install
  cd $cwd
}

_fzf_keybind_map=(                \
  "ctrl-h:backward-char"          \
  "ctrl-l:forward-char"           \
  "ctrl-space:accept"             \
  "ctrl-d:backward-delete-char"   \
  "ctrl-f:page-down"              \
  "ctrl-b:page-up"                \
  "ctrl-s:toggle"                 \
)
export FZF_DEFAULT_OPTS="--height 10% --reverse --border horizontal --multi --cycle \
  --bind=${(j:,:)_fzf_keybind_map} \
  --inline-info \
  --color fg:252,bg:233,hl:81,fg+:252,bg+:235,hl+:118 \
  --color info:144,prompt:161,spinner:135,pointer:196,marker:208"

export FZF_DEFAULT_COMMAND='ag -g ""'
export FZF_CTRL_T_OPTS="--preview '(highlight -O ansi -l {} 2> /dev/null \
  || cat {} || tree -C {}) 2> /dev/null | head -200'"

# export FZF_CTRL_R_OPTS="--preview 'echo {}' \
# --preview-window down:3:hidden:wrap --bind '?:toggle-preview'"
function vfzf { vim $(fzf); }
function ffzf {
  IFS=$'\n' out=($(eval "$1" | \
    fzf --query="$3" --expect=ctrl-o,ctrl-e,ctrl-v,ctrl-x --prompt="$2"))

  local first_line=$(head -n 1 <<< "$out")
  local files
  local opt
  local file
  local key
  if [[ "$first_line" == ctrl* ]]; then
    files=$(tail -n +2 <<< "$out")
    key="$first_line"
  else
    files="$out"
    key=""
  fi
  if [ -z "$files" ]; then
    return
  fi
  if [[ -z "$key" || "$key" == ctrl-x || "$key" == ctrl-v ]]; then
    if [[ "$key" == ctrl-x ]]; then
      opt="-o"
    elif [[ "$key" == ctrl-v ]]; then
      opt="-O"
    else
      opt=""
    fi
    local cmd="${EDITOR:-vim} $opt $(echo ${files} |  tr '\n' ' ')"
    echo $cmd
    eval ${cmd}
  else
    for file in ${(f)files}; do
      if [[ "$key" = ctrl-o ]]; then
        get_duf "$file"
      elif [[ "$key" == ctrl-e ]]; then
        get_blamef "$file"
      fi
    done
  fi
}

_fbcode_path_array=(          \
  "experimental/xlwang"       \
  "sigrid"                    \
  "fblearner"                 \
  "caffe2"                    \
  "search"                    \
  "nlp_tools"                 \
  "unicorn"                   \
)

_fbcode_path=${(j:,:)_fbcode_path_array}
_cconf_path="unicorn,search"

function ccf {
  local query="find $_cconf_path -type f"
  local prompt="cconf> "
  ffzf $query $prompt $1
}
function fb1 {
  local query="find  ~/fbcode/{$_fbcode_path} -type f"
  local prompt="fbcode> "
  ffzf $query $prompt $1
}
function fb2 {
  local query="find ~/fbcode2/{$_fbcode_path} -type f"
  local prompt="fbcode2> "
  ffzf $query $prompt $1
}
function fb3 {
  local query="find ~/fbcode3/{$_fbcode_path} -type f"
  local prompt="fbcode3> "
  ffzf $query $prompt $1
}
function fb {
  local cwd=$(readlink -f .)
  local prompt="$(~/misc/scripts/fb_repo_version.sh)> "
  local query="~/misc/scripts/find_in_fb.sh"
  ffzf $query $prompt $1
}
function ff {
  local query="find . -type f"
  local prompt="files> "
  ffzf $query $prompt $1
}
# function ff {
#   IFS=$'\n' out=($(fzf --query="$1" \
#     --expect=ctrl-o,ctrl-e,ctrl-v,ctrl-x --prompt="files> "))
#   local first_line=$(head -n 1 <<< "$out")
#   local files
#   local opt
#   local file
#   local key
#   if [[ "$first_line" == ctrl* ]]; then
#     files=$(tail -n +2 <<< "$out")
#     key="$first_line"
#   else
#     files="$out"
#     key=""
#   fi
#   if [ -z "$files" ]; then
#     return
#   fi
#   if [[ -z "$key" || "$key" == ctrl-x || "$key" == ctrl-v ]]; then
#     if [[ "$key" == ctrl-x ]]; then
#       opt="-o"
#     elif [[ "$key" == ctrl-v ]]; then
#       opt="-O"
#     else
#       opt=""
#     fi
#     local cmd="${EDITOR:-vim} $opt $(echo ${files} |  tr '\n' ' ')"
#     echo $cmd
#     eval ${cmd}
#   else
#     for file in ${(f)files}; do
#       if [[ "$key" = ctrl-o ]]; then
#         get_duf "$file"
#       elif [[ "$key" == ctrl-e ]]; then
#         get_blamef "$file"
#       fi
#     done
#   fi
# }
function bbbd_unicorn() {
  cd ~/fbcode

  bbbd //unicorn/topaggr:top_aggregator_server && \
    unicorn_run_locally \
    ~/fbcode/buck-out/gen/unicorn/topaggr/top_aggregator_server \
    --smc_tiername=unicorn.topaggr.facebar.oregon.xlwang $@

#
}

alias gg > /dev/null 2>&1 && unalias gg
function gg() {
  local file
  local line
  read -r file line \
    <<<"$(ag --nobreak --noheading ${1:=.} \
    | fzf --nth=2 --prompt="ag> " \
    | awk -F: '{print $1, $2}')"

  if [[ -n $file ]]
  then
    vim $file +$line
  fi
}

# dd - search directory including hidden directories
function dd() {
  local dir
  local input
  [[ $# -gt 0 && -d $1 ]] && \
    { [[ $1 == */ ]] && { input=$1 } || { input=$1/ } } || \
      { input=. }
      dir=$(find ${input} -type d 2> /dev/null | fzf --query="$*" +m --prompt="dir> ") \
        && cd "$dir"
      }

# ddd - search directory including hidden directories
function ddd() {
  local cwd=$(readlink -f .)
  local repo="fbcode"
  local dir
  if [[ $cwd == *"fbsource2"* ]]; then
    repo="fbcode2"
  elif [[ $cwd == *"fbsource4"* ]]; then
    repo="fbcode3"
  fi
  local query="find ~/$repo/{$_fbcode_path} -type d 2> /dev/null"
  dir=$(eval $query | fzf --query="$*" +m --prompt="fbdir> ") \
    && cd "$dir"

#
}
# v - open files in ~/.viminfo
# consider migrating to ~/.cache/ctrlp/mru/cache.txt
function _process_mru_file_lines() {
  while read line; do
    local f="${line/\~/$HOME}"
    if [[ ! -f "$f" ]] && [[ -f "$HOME/www/$f" ]]; then
      f="$HOME/www/$f"
    elif [[ ! -f "$f" ]] && [[ -f "$HOME/fbcode/$f" ]]; then
      f="$HOME/fbcode/$f"
    elif [[ ! -f "$f" ]] && [[ -f "$HOME/configerator/$f" ]]; then
      f="$HOME/configerator/$f"
    elif [[ ! -f "$f" ]] && [[ -f "$HOME/instagram-server/distillery/$f" ]];
    then
      f="$HOME/instagram-server/distillery/$f"
    fi

    if [[ -f "$f" ]]; then
      f=${f/\/data\/users\/xlwang\/fbsource\/fbcode/\~\/fbcode}
      f=${f/\/data\/users\/xlwang\/www-hg/\~\/www}
      f=${f/\/data\/users\/xlwang\/www/\~\/www}
      f=${f/\/data\/users\/xlwang\/configerator/\~\/configerator}
      f=${f/\/data\/users\/xlwang\/instagram\/instagram-server/\~\/instagram-server}
      f=${f/\/data\/users\/xlwang/\~}
      f=${f/\/home\/xlwang/\~}
      echo "$f"
    fi
  done | awk '!seen[$0]++'
}
function _v() {
  local files=$(awk '!seen[$0]++')
  files=$(echo $files | fzf --query="$*" --prompt="fh> " -m -1)
  files=${files//\~/$HOME}
  if [[ -n $files ]]; then
    greenecho "$files"
    (exec </dev/tty vim "${(f)files}" +'vert all')
  fi
}
function v() {
  local lines
  lines=$(cat ~/.cache/ctrlp/mru/cache.txt | _process_mru_file_lines)
  echo $lines | _v
}
function vv() {
  # Sometimes ctrp mru is truncated, or missing; fallback to viminfo
  local lines
  lines=$(cat ~/.cache/ctrlp/mru/cache.txt | _process_mru_file_lines)
  lines+=$(sed -n -E -e '/^>|^:sp|^:vs/p' ~/.viminfo | \
    tr -s ' ' | cut -d' ' -f2 | _process_mru_file_lines)

  echo $lines | _v
}
function viminfo_to_mru() {
  # Sometimes ctrp mru is truncated, or missing; fallback to viminfo
  local lines
  lines=$(cat ~/.cache/ctrlp/mru/cache.txt | _process_mru_file_lines)
  lines+=$(sed -n -E -e '/^>|^:sp|^:vs/p' ~/.viminfo | \
    tr -s ' ' | cut -d' ' -f2 | _process_mru_file_lines)

  lines=$(echo $lines | _process_mru_file_lines)
  echo $lines > ~/.cache/ctrlp/mru/cache.txt
}
# z - open directories
unalias z 2> /dev/null
function z() {
  [ $# -gt 0 ] && _z "$*" && return
  cd "$(zshz -l 2>&1 | fzf --nth=2 --prompt="dir-hist> " +s +m --tac --query "$*" \
    | sed 's/^[0-9,.]* *//')"

#
}
function h() {
  local rev="$(hg log -T '#{xg_sl_one_line_no_link}\n' -r "sort(draft(), -date)" \
    2>/dev/null --color=always \
    | sed -n '/.*#/p' | sed 's/^[^#]*#//g'  \
    | fzf --query="$*" --prompt='hg> ' --ansi | cut -d ' ' -f 1)"

  [[ -z $rev ]] && return 1
  local cmd="hg update $rev"
  hg log -T '{xg_sl}' --rev $rev
  cyanecho ${cmd}
  eval ${cmd}
}

function y() {
  local selected=( $(fc -rl 1 |
    perl -ne 'print if ( /^\s*[0-9]+\**\s+oscstr\s+\"/ && !$seen{(/^\s*[0-9]+\**\s+(.*)/, $1)}++)' |
    fzf --query="$*" --prompt="oscyank> " --nth=3.. -1 ))

  echo 123 | oscyank  -

  local cmd=$(echo $selected | cut -f 2- -d' ')
  echo $cmd
  eval "$cmd"
}
# Kerberos
function krefresh() {
  kdestroy
  kinit
  klist
  fbwallet_fetch
}
function refresh_ping () {
  rm ~/misc/tmp/ping_$(hostname).txt
  ~/misc/scripts/ping_status.sh;
  cat ~/misc/tmp/ping_$(hostname).txt
}
function everpaste_url_gen() {
  ${HOME}/misc/scripts/everpaste_url_gen.sh $*
}
function parse_everpaste_handle() {
  less $* | grep "everpaste" | grep -Eo '(http|https)://\S+' \
    | tr -d '.' | grep -oP 'handle=\K\S+' --color=never

#
}
function parse_everpaste_url_from_file() {
  for x in $(parse_everpaste_handle $*); do; everpaste_url_gen $x ; done

#
}
function parse_flow_net_everpaste_handle() {
  less $* | grep "everpaste" | grep "net" | grep -Eo '(http|https)://\S+' \
    | tr -d '.' | grep -oP 'handle=\K\S+' --color=never

#
}
function parse_flow_net_everpaste_url_from_file() {
  for x in $(parse_flow_net_everpaste_handle $*); do; everpaste_url_gen $x ; done
}
function parse_flow_train_net_everpaste_handle() {
  less $* | grep "everpaste" | grep "net" | grep "train" \
    | grep -Eo '(http|https)://\S+' | tr -d '.' | grep -oP 'handle=\K\S+' --color=never

#
}
function parse_flow_train_net_everpaste_url_from_file() {
  for x in $(parse_flow_train_net_everpaste_handle $*); do; everpaste_url_gen $x ; done
}
function _maybe_buck_run_exp() {
  local target=$1
  local par_path="$BUCKOUT/experimental/xlwang/$target.par"
  local target_path="//experimental/xlwang:$target"
  if [[ $2 == "force_build_buck" ]]; then
    pushd ${HOME}/fbcode > /dev/null
    bbr @mode/opt $target_path -- "${@:3}"
    popd > /dev/null
  elif [[ -e ${par_path} ]]; then
    ${par_path} "${@:2}"
  else
    pushd ${HOME}/fbcode > /dev/null
    bbr @mode/opt $target_path  -- "${@:2}"
    popd > /dev/null
  fi
}
function list_my_tables() {
  _maybe_buck_run_exp metastore_util list_table
}

function get_FB_UID() {
  local fbid
  if [[ -e  $BUCKOUT/experimental/xlwang/fbid.par ]]; then
    fbid=$($BUCKOUT/experimental/xlwang/fbid.par $* RNE)
  else
    pushd  ${HOME}/fbcode RNUL
    fbid=$(bbr //experimental/xlwang:fbid -- $* RNE)
    popd RNUL
  fi
  echo $fbid
}
function get_metastore_tables() {
  local tables
  if [[ -e $BUCKOUT/experimental/xlwang/metastore_util.par ]]; then
    fbid=$($BUCKOUT/experimental/xlwang/metastore_util.par $* RNE)
  else
    pushd  ${HOME}/fbcode
    fbid=$(bbr //experimental/xlwang:metastore_util -- $* RNE)
    popd
  fi
  echo $fbid
}
function export_env_variables() {
  var=$1
  if [[ -n $(printenv $var) ]]; then
    return 0
  fi
  cmd=$(tmux showenv -s $var 2>/dev/null)
  if [[ $? -ne 0  || $cmd == unset* ]]; then
    cmd="get_$var"
    val=$($cmd)
    tmux setenv $var "$val"
  fi
  eval $(tmux showenv -s $var)
  return 0
}
# if [[ $(uname) == "Linux" ]]; then
#   (export_env_variables "FB_UID" &)
# fi
function presto() {
  local presto=/usr/local/bin/presto
  local namespace=feed_fblearner
  $presto $namespace --execute $1
}
function presto_list_table() {
  where_clause=""
  if [[ -n $3 ]]; then
    where_clause="where ds>='<DATEID-${3}>'"
  fi

  /usr/local/bin/presto --output-format ALIGNED $1 \
    --execute \
    "select ds, count(*) as cnt from ${2} ${where_clause} group by 1 order by 1 desc"

#
}
alias spark='spark-sql --namespace search'
function presto_sample() {
  local limit=${2:=10}
  presto "select * from $1 limit $limit"
}
function presto_drop() {
  presto "drop table $*;"
}
alias today="date +%F"
alias yesterday="date --date='yesterday' +%F"
function date_eval() {
  date --date="$*" +%F
}

super_shell_find() {
  local cmd=$1
  redecho "type $cmd"
  type $cmd
  redecho "declare -f $cmd"
  declare -f $cmd
  redecho "alias $cmd"
  alias $cmd
  redecho "whereis $cmd"
  whereis $cmd
  #command $cmd
}
function cp_to_public() {
  local fp=$1
  local f=$(basename $fp)
  cp $fp ~/public/
  yellowecho "url: https://home.fburl.com/~xlwang/$f"
}
alias ccat="pygmentize"
alias jscat="pygmentize -l json"

alias gdb="gdb --directory=~/fbsource/fbcode -ex='fbload stl' -ex='fbload folly'"
# do not use tui because of gdb-dashboard
# alias gdb="gdb --directory=~/fbsource/fbcode -tui -ex='fbload stl' -ex='fbload folly'"

function cp_exp() {
  mkdir -p ~/fbcode/scripts/xlwang
  cp -n ~/local/exp_scripts/* ~/fbcode/scripts/xlwang

}

function cpz {
  cp --backup=t --verbose ~/.z ~/misc/tmp/
}
function bfz {
  # backfill z history
  local lines
  lines=$(cat ~/.cache/ctrlp/mru/cache.txt | _process_mru_file_lines)
  lines+=$(sed -n -E -e '/^>|^:sp|^:vs/p' ~/.viminfo | \
    tr -s ' ' | cut -d' ' -f2 | _process_mru_file_lines)

  #
  local curpwd=$(pwd)
  local total_lines=${(f)#lines}

  function _add {
    for ln in "${(f)lines}"; do
      while [[ $ln != '/' && $ln != '.' ]]; do
        zshz --add "$(eval echo $ln)"
        ln=$(dirname "$ln")
        echo "$ln"
      done
    done
  }

  #
  _add | tqdm --unit file --unit_scale --total $total_lines
  cd $curpwd
}
alias up_cache="~/misc/scripts/cache_sync.sh"
function tqdm {
  if [[ -e ~/workspace/tqdm ]]; then
    PYTHONPATH=~/workspace/tqdm python -m tqdm $@
  else
    cat
  fi
}

function hcs {
  hg bookmark -d current
  hg bookmark current
  hg cloud sync
}
function hcj {
  hg backupdisable # disable for 1hr
  hg up master
  hg cloud join
  hg up current
}
alias cuda_util='nvidia-smi `
`--query-gpu=index,uuid,utilization.gpu,memory.total,memory.used --format=csv'

alias fb-sks-agent='/Library/CPE/bin/FBSKSAgent.app/Contents/MacOS/fb-sks-agent'

function merge_zsh_history {
  ~/misc/scripts/merge_zsh_history.sh $1 ~/.zsh_history ~/.zsh_history
}

function pastry_diff {
  mkdir -p ~/tmp
  pastry $1 > ~/tmp/$1
  pastry $2 > ~/tmp/$2
  echo "diff ~/tmp/$1 ~/tmp/$2"
  diff --color=always ~/tmp/$1 ~/tmp/$2 | less -R
}

## ========================================================================== ##
#                                                                              #
#               .___  ___.      ___           _______.___________.             #
#               |   \/   |     /   \         /       |           |             #
#               |  \  /  |    /  ^  \       |   (----`---|  |----`             #
#               |  |\/|  |   /  /_\  \       \   \       |  |                  #
#               |  |  |  |  /  _____  \  .----)   |      |  |                  #
#               |__|  |__| /__/     \__\ |_______/       |__|                  #
## ========================================================================== ##

# function drtb {
#   local manifold=""
#   for ((i=1; i<=$#; i++))
#   do
#     job="$@[i]"
#     echo $job
#     if [[ -n $manifold ]]; then
#       manifold+='%2C'
#     fi
#     manifold+="${i}_${job}:manifold://deep_retrieval/tree/jobs/$job/tensorboard"
#   done
#   url="https://www.internalfb.com/intern/tensorboard/?dir=$manifold"
#   fburl $url
# }
function drtb { # to be deprecated
  url=$(~/misc/scripts/tb_cmp.py gen "$@")
  fburl $url
}

function mast_tenant {
  mast list-jobs --job-application-metadata rm_attribution:$1 | \
    nl -w2 -s'] ' -v0 | \
    awk '(NR>1) {
      print $0, "\thttps://www.internalfb.com/mast/job/"$2 ; next
    } { print $0 }' | \
      lolcat -h 0.5

#
}

function mast_list {
  echo "$(mast list-jobs --job-owner-unixname $USER)" > ~/misc/tmp/mast
  # cat ~/misc/tmp/mast | nl -w2 -s'] ' -v0 | lolcat -h 0.5

  # cat ~/misc/tmp/mast | \
  #   nl -w2 -s'] ' -v0 | \
  #   awk '(NR>1) { cmd="fburl " "https://www.internalfb.com/mast/job/"$2;
  #     cmd | getline d; print $0, d }' | \
  #       lolcat -h 0.5

  cat ~/misc/tmp/mast | \
    nl -w2 -s'] ' -v0 | \
    awk '(NR>1) {
      print $0, "\thttps://www.internalfb.com/mast/job/"$2 ; next
    } { print $0 }' | \
      lolcat -h 0.5

    print -s "mast_select "

#
}
function mast_select {
  # Get the number of command line arguments
  num_args=$#
  local i
  # Iterate over the command line arguments
  for i in $(seq 1 $num_args); do
    # Get the current argument
    arg=$1

    # Increment the argument
    arg=$((arg + 1))

    # Set the modified argument
    set -- "$@" "$arg"

    # Shift the arguments to the left
    shift
  done

  runs=$(select_lines_from_file ~/misc/tmp/mast "$@" | cut -d' ' -f1 | xargs)
  echo "$runs"
  print -s "mast_link $runs"

}
function select_lines_from_file {
  # run awk
  awk -v nums="${*:2}" '
  BEGIN {
  tot = n = split(nums, arr)       # split and store numbers in an array
  for (i=1; i<=n; i++)             # convert to lines array with key as numbers
    lines[arr[i]]
  }
  NR in lines {                       # if current line no is in lines array
  lines[NR] = $0                   # store current line as value
  if (!--tot)                      # decrement total count
    exit                          # exit when we have processed all
  }
END {                               # print all stored lines
for (i=1; i<=n; i++)
  print lines[arr[i]]
}' "$1"

}

function mast_cat {
  # cat -n ~/misc/tmp/tb | head -n "${1:-5}" | lolcat -h 0.5
  # cat ~/misc/tmp/tb | nl -w2 -s'] ' | \
  #   head -n ${1-5} | \
  #   awk '{ \
  #   "~/misc/scripts/tb_cmp.py query-tag -h " $3 " ~/misc/tmp/tb_tags" |& getline v; \
  #   print $1"\t"$2"\t"$3"\t"v; \
  #   for(i=5;i<=NF;i++) { \
  #     "~/misc/scripts/mast_cat_run_convert.sh " $i |& getline r; \
  #     printf "\t\t %2s) https://www.internalfb.com/mast/job/%s\n", i-4, r; \
  #   } \
  #   printf "\t\t     %s\n", $4; \
  # }' | \
  # lolcat -h 0.5
  ~/misc/scripts/tb_cmp.py mast-cat ~/misc/tmp/tb_tags ~/misc/tmp/tb -n ${1:-"10"} | lolcat -h 0.5
  print -s "mast_cat_select "
}
function mast_cat_tagged {
  # cat -n ~/misc/tmp/tb | head -n "${1:-5}" | lolcat -h 0.5
  cat ~/misc/tmp/tb | nl -w2 -s'] ' |  \
    awk -v l=${1-5} '{ \
    "~/misc/scripts/tb_cmp.py query-tag -h " $3 " ~/misc/tmp/tb_tags" |& getline v; \
    if (l==0) exit; if (v=="") next; l--; \
      print $1"\t"$2"\t"$3"\t"v; \
      for(i=5;i<=NF;i++) \
        printf "\t\t %2s) %s\n", i-4, "https://www.internalfb.com/mast/job/"$i; \
        printf "\t\t     %s\n", $4; }' | \
        lolcat -h 0.5

  print -s "mast_cat_select "
}
function mast_cat_select {
  local runs=$(sed "${1}q;d" ~/misc/tmp/tb | tail -n 1 | cut -d$'\t' -f4)
  local fb_url=$(sed "${1}q;d" ~/misc/tmp/tb | tail -n 1 | cut -d$'\t' -f3)

  local r
  for r in ${=runs[@]}; do
    # echo mast://$r
    echo "https://www.internalfb.com/mast/job/$r"
  done
  echo $fb_url | lolcat -h 0.5

  print -s "mast_link $runs"

}
function mast_contains {
  local runs1=$(sed "${1}q;d" ~/misc/tmp/tb | tail -n 1 | cut -d$'\t' -f4 \
    | xargs -n1 | sort | xargs)

  local runs2=$(sed "${2}q;d" ~/misc/tmp/tb | tail -n 1 | cut -d$'\t' -f4 \
    | xargs -n1 | sort | xargs)

  local not_contain=0
  for r in ${=runs2[@]}; do
    if [[ ! $runs1 =~ $r ]]; then
      echo $r
      not_contain=1
    fi
  done
  return $not_contain
}
function mast_remove {
  # sed -i "${1}d" ~/misc/tmp/tb
  sed -i "$(echo $@ | tr ',' ' ' | sed -E 's/(\w+)/\1d/g' | tr ' ' ';')" ~/misc/tmp/tb
}
function drst {
  for ((i=1; i<=$#; i++))
  do
    job="$@[i]"
    mast list-jobs --job-name $job --include-historical
  done
}
function drst_my {
  all_jobs=$(mast list-jobs --limit 100 --include-historical \
    --job-owner-unixname $(whoami) )

  echo $all_jobs | head -n 1
  for ((i=1; i<=$#; i++))
  do
    job="$@[i]"
    echo $all_jobs | grep --color=auto "${job}"
  done
  drtb "$@"

#
}
function mast_resolve {
  function silent_refresh_mast_list {
    mast_select >/dev/null 2>&1
    echo $(( $(cat ~/misc/tmp/mast | wc -l) - 1 ))
  }

  function resolve {
    local i
    for ((i=1; i<=$#; i++))
    do
      local arg="$@[i]"
      local prefix=""
      if [[ $arg == *,* ]]; then
        prefix=$(echo $arg | cut -f1 -d,)","
        arg=${arg#*,}
      fi

      if [[ "$arg" == "$" ]]; then
        local total_mast_runs=$(silent_refresh_mast_list)
        for ((j=1; j<=$total_mast_runs; j++))
        do
          echo -n "$(mast_select "$j") "
        done
      elif [[ "$arg" =~ ^-?[0-9]+$ ]]; then
        echo -n $prefix$(mast_select "$arg")
      elif [[ "$arg" == c* ]]; then
        local cat_id=$(echo "${arg:1}" | cut -d'.' -f1)
        local run_id=$(echo "${arg:1}" | cut -s -d'.' -f2)
        local runs=$(sed "${cat_id}q;d" ~/misc/tmp/tb | tail -n 1 | cut -d$'\t' -f4)
        local j=0
        for r in ${=runs[@]}; do
          j=$((j+1))
          if [[ -z $run_id || $run_id == $j ]]; then
            echo "$prefix$r"
          fi
        done
      else
        echo -n $prefix$(echo "${arg/"https:\/\/www.internalfb.com\/mast\/job\/"}")
      fi
      if [[ $i != $# ]]; then
        echo -n " "
      fi
    done
    echo ""
  }

  resolve $@ | \
    awk -v RS='\\s+' '!seen[$0]++{printf "%s%s", (NR>1?OFS:""), $0} END{print ""}'

#
}
function mast_kill {
  for ((i=1; i<=$#; i++))
  do
    job="$(mast_resolve $@[i])"
    mast kill --comment user_error "$job"
  done

}
function mast_link {
  [[ $# -eq 0 ]] && return 1
  local runs="$(mast_resolve "$@")"
  url=$(~/misc/scripts/tb_cmp.py gen "${=runs}")
  fb_url=$(fburl "$url")
  dt=$(date +%Y-%m-%d+%H:%M:%S)
  hashkey=$(echo "$runs" | md5sum | head -c 8)

  echo "$dt""\t""$hashkey""\t""$fb_url""\t""$runs" >> ~/misc/tmp/tb
  ~/misc/scripts/tb_cmp.py sort-dedup -s 1 ~/misc/tmp/tb

  local r
  for r in ${=runs[@]}; do
    local suffix=""
    if [[ $r == *,* ]]; then
      suffix=" # "$(echo $r | cut -f1 -d,)
      r=${r#*,}
    fi
    echo "https://www.internalfb.com/mast/job/$r$suffix"
  done
  echo $fb_url | lolcat -h 0.5
}
function mast_tag {
  local h=$(sed "${1}q;d" ~/misc/tmp/tb | tail -n 1 | cut -d$'\t' -f2)
  ~/misc/scripts/tb_cmp.py tag -t $2 -h $h ~/misc/tmp/tb_tags
  mast_cat $1
}
function mast_runs {
  local mast_list=$(mast list-jobs --job-owner-unixname $USER | tee /dev/tty )
  local patt="fire-$USER-"
  if [[ $# -ne 0 ]]; then
    patt="fire-$USER-$(date "$@" '+%m%d')-"
  fi
  runs=$(echo "$mast_list" |  grep $patt \
    | awk '{print $1}' \
    | xargs)

  echo ""
  yellowecho "selected runs: $runs"

  echo ""
  mast_link "${=runs[@]}"

#
}
function mast_exp {
  vim ~/misc/tmp/mast_exp.md
}

function mast_show {
  echo "mast_list"
  echo "========"
  mast_list

  echo "mast_tenant cot"
  echo "========"
  mast_tenant cot

  echo "mast_cat"
  echo "========"
  mast_cat

  local dir="$HOME/fbcode/minimal_viable_ai/models/blue_reels_vdd/cotrain/scripts"
  if [[ -f $dir/mast_tenant_select.sh ]]; then
    echo "mast_tenant_select.sh"
    echo "========"
    $dir/mast_tenant_select.sh
  fi

}
function mast_status {
  local runs="$(mast_resolve "$@")"
  for r in "${=runs[@]}"; do
    echo "https://www.internalfb.com/mast/job/$r"
    mast diag execution "$r" |  head -n -2 | lolcat -h 0.5

    # local res=$(mast get-status $r)
    # local attempt=$(echo $res | grep "attemptIndex (i32)" \
    #   | head -1 | awk '{$1=$1};1' | sed -E 's/.*=\s*([0-9]+).*/\1/')
    #
    # local st=$(echo $res | grep "state (enum)" | head -1 \
    #   | awk '{$1=$1};1' | sed -E 's/.*\((.*)\).*/\1/')
    #
    # local ts=$(echo $res | awk "/jobStateTransitionTimestampSecs/,/},/" \
    #   | sed -e '1d' -e '$d' \
    #   | sed -E 's/(.*->\s*)([0-9]+)(.*)/echo "\1"`date -d @"\2"`"\3"/;e')
    #
    # echo $r
    # echo -e "attempt: $attempt\nstatus: $st\ntimestamp: \n$ts" | lolcat -h 0.5
  done

}
function mast_model_entity_id {
  local runs="$(mast_resolve "$@")"
  for r in "${=runs[@]}"; do
    echo "$r"
    manifold get --overwrite_local_path \
      deep_retrieval/tree/jobs/$r/info.json ~/tmp/tmp_job_info.json

    cat ~/tmp/tmp_job_info.json
    echo ""
    local mid=$(cat ~/tmp/tmp_job_info.json | jq ".retryable_job_save_model_entity_id")
    echo "$r => $mid" | lolcat -h 0.5
    rrm ~/tmp/tmp_job_info.json
  done
}

## ========================================================================== ##
#             ___________    ____  _______.___________._______ .___  ___.      #
#            /       \   \  /   / /       |           |   ____||   \/   |      #
#           |   (----`\   \/   / |   (----`---|  |----|  |__   |  \  /  |      #
#            \   \     \_    _/   \   \       |  |    |   __|  |  |\/|  |      #
#        .----)   |      |  | .----)   |      |  |    |  |____ |  |  |  |      #
#        |________..________| ________/ ______|___   _____________| ______     #
#         /       ||   _  \  |   ____| /      ||  | |   ____||  |  /      |    #
#        |   (----`|  |_)  | |  |__   |  ,----'|  | |  |__   |  | |  ,----'    #
#         \   \    |   ___/  |   __|  |  |     |  | |   __|  |  | |  |         #
#     .----)   |   |  |      |  |____ |  `----.|  | |  |     |  | |  `----.    #
#     |_______/    | _|      |_______| \______||__| |__|     |__|  \______|    #
## ========================================================================== ##
if [[ $(uname) == "Darwin" ]]; then
  source ${HOME}/misc/dotfiles/lib/.profile_wangxl_darwin
elif [[ $(uname) == "Linux" ]]; then
  source ${HOME}/misc/dotfiles/lib/.profile_wangxl_linux
fi
