#!/bin/sh
## ========================================================================== ##
#       ______   ______    __        ______   .______          _______.        #
#      /      | /  __  \  |  |      /  __  \  |   _  \        /       |        #
#     |  ,----'|  |  |  | |  |     |  |  |  | |  |_)  |      |   (----`        #
#     |  |     |  |  |  | |  |     |  |  |  | |      /        \   \            #
#     |  `----.|  `--'  | |  `----.|  `--'  | |  |\  \----.----)   |           #
#      \______| \______/  |_______| \______/  | _| `._____|_______/            #
## ========================================================================== ##
# print with or without newline
function _color_echo {
  if [[ "$2" == "-n" ]]; then echo -ne "\033[${1}${@:3}\033[0m"
  else echo -e "\033[${1}${@:2}\033[0m"; fi }
function blackecho    { _color_echo "1;30m" "${@}"; }
function redecho      { _color_echo "1;31m" "${@}"; }
function greenecho    { _color_echo "1;32m" "${@}"; }
function yellowecho   { _color_echo "1;33m" "${@}"; }
function blueecho     { _color_echo "1;34m" "${@}"; }
function magentaecho  { _color_echo "1;35m" "${@}"; }
function cyanecho     { _color_echo "1;36m" "${@}"; }
function whiteecho    { _color_echo "1;37m" "${@}"; }

## ========================================================================== ##
#               ___       __       __       ___           _______.             #
#              /   \     |  |     |  |     /   \         /       |             #
#             /  ^  \    |  |     |  |    /  ^  \       |   (----`             #
#            /  /_\  \   |  |     |  |   /  /_\  \       \   \                 #
#           /  _____  \  |  `----.|  |  /  _____  \  .----)   |                #
#          /__/     \__\ |_______||__| /__/     \__\ |_______/                 #
## ========================================================================== ##
##-------------------------------== general ==--------------------------------##
function test_alias_exist { alias $1 2>/dev/null >/dev/null; }
function tmux_setup { tmux new -AD -s $(hostname -s)-main; }
function exe_remote_script {
  eval "$(curl -fsSL $1)"
}
alias help='man'
function echo_path { echo ${${1:-$PATH}//:/$'\n'}; }
function colorize_column {
  local s="$(sed "s/[^[:blank:]]\{1,\}/\\\\033[${1}&\\\\033[0m/${2}")"
  echo -e $s
}
function get_hostname {
  ssh -G $1 | awk '/^hostname / { print $2 }'
}
function rvmv {
  mv $2 $1
}
function uncolor {
  echo "$1" | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g"
}
##--------------------------------== admin ==---------------------------------##
function _psfmt {
  if [[ $(uname) == "Linux" ]]; then
    # only gnu ps has tid option
    local fmt="user,tid,ppid,pcpu,cpu,pmem,rss,tty,state,pri,nice,start,time"
  else
    local fmt="user,pid,ppid,pcpu,cpu,pmem,rss,tty,state,pri,nice,start,time"
  fi
  if [[ $1 == "comm" ]]; then
    fmt+=",comm"
  else
    fmt+=",command"
  fi
  if [[ $(uname) == "Linux" ]]; then
    echo "$(ps -e H -o $fmt)"
  else
    echo "$(ps -e -o $fmt)"
  fi
}
function pscpu {
  local s="$(_psfmt comm)"
  local h="$(echo $s | head -1)"
  local b="$(echo $s | sed 1d)"
  greenecho $h
  b="$(echo $b | sort -k4 -rn)"
  echo "$b" | head $@ | colorize_column "1;36m" 4
}
function psmem {
  local s="$(_psfmt comm)"
  local h="$(echo $s | head -1)"
  local b="$(echo $s | sed 1d)"
  greenecho $h
  b="$(echo $b | sort -k7 -rn)"
  echo "$b" | head $@ | colorize_column "1;36m" 7
}
function psmine {
  local u=$(whoami)
  local s="$(_psfmt comm)"
  local h="$(echo $s | head -1)"
  local b="$(echo $s | sed 1d)"
  greenecho $h
  b="$(echo $b | awk -v var=${u} '{if ($1 == var) {print $0} }')"
  echo "$b" | colorize_column "1;36m" 1
}
alias pscmd='print -l ${(o)history%% *} | uniq -c | sort -nr | head'
# case insensitive grep
function psgrep { _psfmt | grep -i $1 --color=always | grep -v grep; }
function pszombies { _psfmt "comm" | awk '{ if ($9 == "Z") {print $0} }'; }
# ps pid
function pspidgrep { _psfmt | grep -i $1 | grep -v grep | awk '{print $2}'; }
function pspidmine { psmine | sed 1d | awk '{print $2}'; }
# case sensitive kill
function pskill {
  ps aux | grep -v "grep" | grep "$@" | awk '{print $2}' | xargs kill -9; }
# kill from joblist
function kill_jobs {
  if [[ -n $(jobs) ]];
  then
    for i in $(seq 1 $(jobs | wc -l));
    do kill -9 %$i;
    done
  fi
}
function kill_zombies {
  ps -e -o pid,state | awk '{ if ($2 == "Z") {print $1} }' | xargs  kill -9; }
alias cls='printf "\033c"'
alias tmux_kill='tmux kill-session'
alias tmux_halt='tmux detach'
function q {
  if [[ -z $TMUX ]]; then
    exit
  else
    tmux detach
  fi
}
function check_busy { lsof +D ${@:-.}; }
alias nicer="sudo renice -20"
alias unnice="renice 0"
function nicer_all {
  local ni=${1:-"-20"}
  local x
  for x in "${(@f)$(pspidmine)}";
  do
   redecho "renice $ni $x"
   sudo renice ${ni} ${x}
 done
}
function unnice_all {
  local x
  for x in "${(@f)$(pspidmine)}";
  do
   redecho "nicer ${x}"
   unnice ${x}
 done
}
##------------------------------== file list ==-------------------------------##
## ls -A: List all entries except for . and ...
## zsh f expansion flag to split on newline: arr_of_lns=("${(@f)$(my_cmd)}")
## @: In double quotes, array elements are put into separate words.
##    E.g., ‘"${(@)foo}"’ is equivalent to ‘"${foo[@]}"’ and ‘"${(@)foo[1,2]}"’
##    is the same as ‘"$foo[1]" "$foo[2]"’.
##    This is distinct from field splitting by the f, s or z flags, which still
##    applies within each array element.
## unix.stackexchange.com/questions/28854/list-elements-with-spaces-in-zsh
alias ls_dir_size='for f in "${(@f)$(ls -A)}"; do du -sh $f; done;'
function lsds {
  local du_ver=$(du --version | sed '1q;d' | sed 's/[^0-9.]*\([0-9.]*\).*/\1/')
  if [[ $du_ver -le 8.25 ]]; then
    du -ahd1
  else
    du -ah --max-depth 1
  fi
}
alias dls='find . -maxdepth 1 -type d'
# ls
alias ll="ls -alh"
alias llt="ll -t"
function lll { ll $@ --color=always | less; }
alias lllt="lll -t"
function lls { ll | grep $*; }
alias llsi='lls -i'
function ll_symlink {
    ll "$@" --color=always | grep "\->"; }
# cd
function jump { if [[ $# -eq 1 ]]; then cd $1; fi; cd $(pwd -P); }
function follow { cd $(dirname $(readlink -f $1)); }
alias jp="jump"
alias fl="follow"
# tree might not installed; use ugly tree instead
if [ -z "\${which tree}" ]; then
  tree () {
      find $@ -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'
  }
fi
# gather external ip address
alias show_external_ip="curl -s -S https://icanhazip.com"
alias showptr="curl -s -S -k https://icanhazptr.com"
# gather external/local ip address
alias showip="${HOME}/misc/scripts/ip_lookup.sh all"
##--------------------------------== remove ==--------------------------------##
# real remove
alias rrm='/bin/rm -v'
function rm {
  [[ ! -d ~/.Trash ]] && mkdir ~/.Trash
  local ret=""
  local l
  ret=$(mv --verbose -f --backup=numbered \
        --target-directory ${HOME}/.Trash/ "$@")
  redecho $ret
  local reg=""
  local f1=""
  local f2=""
  local fp="${HOME}/.Trash/rm.undo"
  echo "#!/bin/sh" > $fp
  for l in ${(f)ret}; do
    reg='s/^(.*) -> (.*)$/\1/p'
    f1=$(echo $l | sed -rn $reg)
    if [[ -z $f1 ]]; then
      continue
    fi
    f1=${f1:1:${#f1}-2}
    reg='s/^(.*) -> (.*)$/\2/p'
    f2=$(echo $l | sed -rn $reg)
    f2=$(echo $f2 | sed -r 's/ \(backup: .*\)//')
    f2=${f2:1:${#f2}-2}
    [[ $f1 != /* ]] && f1="$PWD/$f1"
    echo "# \"$f1\" -> \"$f2\"" >> $fp
    echo "mv \"$f2\" \"$f1\"" >> $fp
    echo "echo \"\\033[1;33mmv \\\"$f2\\\" \\\"$f1\\\"\\033[0m\"" >> $fp
  done
}
function undo {
  local fp="${HOME}/.Trash/rm.undo"
  /bin/sh $fp
}
alias empty_trash='find ~/.Trash -mindepth 1 -delete -print'
# remove the following
## all mac .DS_store/.localized files in current directory recursively
function rm_mac_hidden_files {
  local clean_place=${*:-'.'}
  find $clean_place -name '*.DS_Store'  -type f -delete -print
  find $clean_place -name '*.localized' -type f -delete -print
}
## all python .py[co] files and __pycache__ dirs
alias rm_python_compiled_files="pyclean"
function rm_python_compiled_files_no_recursion {
  local clean_place=${*:-'.'}
  find $clean_place -maxdepth 1 -type f -name "*.py[co]" -delete
  find $clean_place -maxdepth 1 -type d -name "__pycache__" -delete
}
## all vim swap .sw[pon]
function rm_vim_swap_files {
  local clean_place=${*:-'.'}
  find $clean_place -name '*.sw[pon]'  -type f -delete -print
}
function rm_vim_swap_files_no_recursion {
  local clean_place=${*:-'.'}
  find $clean_place -maxdepth 1 -name '*.sw[pon]'  -type f -delete -print
}
##-------------------------------== history ==--------------------------------##
## show history with time, increase history size
## https://github.com/robbyrussell/oh-my-zsh/issues/739
## ./.oh-my-zsh/lib/history.zsh
## "mm/dd/yyyy":  -f
## "dd.mm.yyyy":  -E
## "yyyy-mm-dd":  -i
## HISTSIZE is the maximum number of lines that are kept in a session and
## SAVEHIST is the maximum number of lines that are kept in the history file.
alias history='fc -i -l 1'
# oh-my-zsh/plugins/history/history.plugin.zsh
function hs { history | grep $*; }
alias hsi='hs -i'
HISTSIZE=130000
SAVEHIST=130000
##---------------------------== search and find ==----------------------------##
# grep: recursive, ln num, show file name, context
alias gg="grep -R -n -H -C5"
function ggs {
  grep -R -l $1 | xargs sed -i "s/$1/$2/g"
}
alias ggi="grep -R -n -H -C5 -i"
function ggsi {
  grep -R -l -i $1 | xargs sed -i "s/$1/$2/gi"
}
alias ggt="grep -R -n -H -C5 --include"
alias ggti="grep -R -n -H -C5 -i --include"
# find: search file/directory
alias sd='find . -type d -name'
alias sf='find . -type f -name'
alias sdi='find . -type d -iname'
alias sfi='find . -type f -iname'
##------------------------== pipes and redirection ==-------------------------##
# pipes
alias -g PH='| head'
alias -g PT='| tail'
alias -g PG='| grep'
alias -g PGI='| grep -i'
alias -g PL="| less"
alias -g PCL="--color=always | less"
alias -g PP="| pygmentize"
alias -g PC="| cat -A"
alias -g PF="| fpp"
alias -g PLL="2>&1 | less"
alias -g PCC="2>&1 | cat -A"
alias -g PPP="2>&1| pygmentize"
alias -g PPL="| pygmentize -O full,style=monokai -l ocaml | less -R +G"
# redirection
alias -g RNE="2> /dev/null"
alias -g RALL="2>&1"
alias -g RNUL="> /dev/null 2>&1"
alias -g FPP="| fpp"
##---------------------------------== vim ==----------------------------------##
function vim_buffers {
  local found=0
  local exe_path
  if [[ -z $1 ]]; then
    local curpwd=$(pwd)
    while [[ ! -e $(pwd)/buffers.list && $(pwd) != $(dirname $(pwd)) ]]; do
      cd $(dirname $(pwd))
    done
    if [[ -e $(pwd)/buffers.list ]]; then
      exe_path=$(pwd)/buffers.list
    else
      exe_path="${HOME}/.vim/buffers.list"
    fi
    cd ${curpwd}
  else
    exe_path="$1"
  fi
  cyanecho $exe_path

  local dir="$(sed '2q;d' $exe_path)"
  cd $dir
  local -a filelist
  filelist=()
  for x in "${(f)$(sed '1,2d' $exe_path)}"; do
    local file="$(echo $x | sed 's/.*"\(.*\)".*/\1/')"
    file="${file/#\~/$HOME}"
    echo $file
    [[ -n $file ]] && { filelist+=($file); }
  done
  vim ${filelist[@]}
}
alias vimb='vim_buffers'
alias vimfb=' vim +FBVimLoadSession'
##---------------------------------== tex ==----------------------------------##
alias tm="${HOME}/misc/scripts/tex_make.sh make"
alias tp="${HOME}/misc/scripts/tex_make.sh preview"
alias tc="${HOME}/misc/scripts/tex_make.sh clean"

## ========================================================================== ##
#       _______.  ______ .______      __  .______   .___________.    _______.  #
#      /       | /      ||   _  \    |  | |   _  \  |           |   /       |  #
#     |   (----`|  ,----'|  |_)  |   |  | |  |_)  | `---|  |----`  |   (----`  #
#      \   \    |  |     |      /    |  | |   ___/      |  |        \   \      #
#  .----)   |   |  `----.|  |\  \----|  | |  |          |  |    .----)   |     #
#  |_______/     \______|| _| `._____|__| | _|          |__|    |_______/      #
#                    _______  _______   __  .___________.                      #
#                   |   ____||       \ |  | |           |                      #
#                   |  |__   |  .--.  ||  | `---|  |----`                      #
#                   |   __|  |  |  |  ||  |     |  |                           #
#                   |  |____ |  '--'  ||  |     |  |                           #
#                   |_______||_______/ |__|     |__|                           #
#              __    __  .______    _______       ___   .___________._______   #
#    ___      |  |  |  | |   _  \  |       \     /   \  |           |   ____|  #
#   ( _ )     |  |  |  | |  |_)  | |  .--.  |   /  ^  \ `---|  |----|  |__     #
#   / _ \/\   |  |  |  | |   ___/  |  |  |  |  /  /_\  \    |  |    |   __|    #
#  | (_>  <   |  `--'  | |  |      |  '--'  | /  _____  \   |  |    |  |____   #
#   \___/\/    \______/  | _|      |_______/ /__/     \__\  |__|    |_______|  #
## ========================================================================== ##
##-------------------------------== profiles ==-------------------------------##
function edit_then_source { vim $1; cyanecho "sourcing $1"; source $1; }
function ed_profile {
  local f1="${HOME}/misc/dotfiles/lib/.profile_wangxl"
  local f2="${HOME}/misc/dotfiles/lib/.profile_wangxl_darwin"
  local f3="${HOME}/misc/dotfiles/lib/.profile_wangxl_linux"
  vim $f1 $f2 $f3
  cyanecho "sourcing ~/.profile_wangxl"
  source ${HOME}/.profile_wangxl
}
function ed_profile_darwin {
  edit_then_source ${HOME}/misc/dotfiles/lib/.profile_wangxl_darwin
}
function ed_profile_linux {
  edit_then_source ${HOME}/misc/dotfiles/lib/.profile_wangxl_linux
}
function up_profile {
  cyanecho "sourcing ${HOME}/.profile_wangxl"
  source ${HOME}/.profile_wangxl
  cyanecho "sourcing ${HOME}/.tmux.conf"
  tmux source-file ${HOME}/.tmux.conf
}
##----------------------------== tmux conf, tmp ==----------------------------##
alias ed_tmux="vim ~/.tmux.conf; tmux source-file ~/.tmux.conf"
function init_tmux_tpm {
  if [[ ! -d ~/.tmux/plugins/tpm/.git ]] && \
     [[ ! -f ~/.tmux/plugins/tpm/.git ]]; then
    git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
    redecho "\n\tRead about tmux tpm configuration for tmp" \
         " at https://github.com/tmux-plugins/tpm\n"
    cyanecho "prefix + I : install new plugins"
    cyanecho "prefix + U : updates plugin(s)"
    cyanecho "prefix + alt + u : remove/uninstall plugins not on the list"
  fi
}
alias up_tmux_tpm="init_tmux_tpm; ~/.tmux/plugins/tpm/bin/install_plugins"
alias clean_tmux_tmp="init_tmux_tpm; ~/.tmux/plugins/tpm/bin/clean_plugins"
alias enter_tmux="tmux new -AD -s $(hostname -s)-main"
##-------------------------------== git:misc ==-------------------------------##
function ed_misc {
  local diff_cmd=" | vertical all | windo diffthis"
  local cmd1='args ~/misc/dotfiles/lib/.profile_wangxl | '
  cmd1+='bel split ~/misc/dotfiles/lib/.profile_wangxl_darwin | '
  cmd1+='bel vsplit ~/misc/dotfiles/lib/.profile_wangxl_linux | wincmd w'
  local cmd2='e ~/misc/dotfiles/lib/.tmux.conf'
  local cmd3='e ~/misc/dotfiles/lib/.vimrc |'
  cmd3+='bel vsplit ~/misc/dotfiles/lib/.vimrc.bundles'
  vim -c "$cmd1" -c "tabnew" \
      -c "$cmd2" -c "tabnew" \
      -c "$cmd3" -c "tabn1"
  cyanecho "sourcing ~/.profile_wangxl"
  source ${HOME}/.profile_wangxl
  cyanecho "sourcing ~/.tmux.conf"
  tmux source-file ${HOME}/.tmux.conf
}
function up_misc {
  pushd ${HOME}/misc > /dev/null
  if [[ -z $(git status --porcelain) ]]; then
    ggpur
  else
    xg_st
    redecho "There is uncommitted changes. Abort..."
  fi
  popd > /dev/null
}
function ed_scripts {
  local f1="${HOME}/misc/scripts/setup_symlinks.sh"
  local f2="${HOME}/misc/scripts/quick_install.sh"
  vim $f1 $f2
}
function up_symlinks {
  local opt=""
  [[ $(uname) == "Darwin" ]] && opt="darwin"
  [[ $(uname) == "Linux" ]] && opt="linux"
  cyanecho "setup symlinks for $opt"
  ${HOME}/misc/scripts/setup_symlinks.sh $opt --no-confirm
}
##--------------------------------== vundle ==--------------------------------##
# oh-my-zsh/plugins/vundle/vundle.plugin.zsh
# https://github.com/VundleVim/Vundle.vim
function init_vundle {
  if [[ ! -d ~/.vim/bundle/Vundle.vim/.git ]] && \
     [[ ! -f ~/.vim/bundle/Vundle.vim/.git ]]; then
    git clone https://github.com/VundleVim/Vundle.vim.git \
      ~/.vim/bundle/Vundle.vim
    redecho "\n\tRead about vim configuration for vundle" \
         " at https://github.com/VundleVim/Vundle.vim\n"
  fi
}
alias up_vundle="init_vundle; vim +PluginInstall +qall"
alias update_vundle="init_vundle; vim +PluginInstall! +qall"
alias clean_vundle="init_vundle; vim +PluginClean! +qall"
alias cd_vundle="cd ~/.vim/bundle"
function build_vundle_ycm {
  if [[ $(uname) == "Darwin" ]]; then
    pushd . RNUL
    cd ~/.vim/bundle/YouCompleteMe
    ./install.py --clang-completer
    popd RNUL
  else
    pushd . RNUL
    local build_dir="${HOME}/.vim/ycm_build"
    mkdir $build_dir
    cd $build_dir
    LDFLAGS="-L/usr/local/lib -Wl,-rpath=/usr/local/lib" \
      cmake -G "Unix Makefiles" \
      -DEXTERNAL_LIBCLANG_PATH="${HOME}/llvm/build/lib/libclang.so" . \
      ~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp
    cmake --build . --target ycm_core --config Release
    popd RNUL
    /bin/rm -rf $build_dir
  fi
}
##------------------------------== oh-my-zsh ==-------------------------------##
function init_oh_my_zsh {
  if [[ ! -d ~/.oh-my-zsh/.git ]] && \
     [[ ! -f ~/.oh-my-zsh/.git ]]; then
    sh -c "$(curl -fsSL \
      https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
    redecho "\n\tRead about oh-my-zsh" \
         " at https://github.com/robbyrussell/oh-my-zsh\n"
  fi
  if [[ ! -d ~/.oh-my-zsh/custom/plugins/zsh-completions/.git ]] && \
     [[ ! -f ~/.oh-my-zsh/custom/plugins/zsh-completions/.git ]]; then
    git clone https://github.com/zsh-users/zsh-completions \
      ~/.oh-my-zsh/custom/plugins/zsh-completions
    redecho "\n\tRead about zsh-completions" \
         " at https://github.com/zsh-users/zsh-completions\n"
  fi
  if [[ ! -d ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions/.git ]] && \
     [[ ! -f ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions/.git ]]; then
    # git://github.com/zsh-users/zsh-autosuggestions \
    git clone https://github.com/zsh-users/zsh-autosuggestions.git \
      ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions
    redecho "\n\tRead about zsh-autosuggestions" \
         " at https://github.com/zsh-users/zsh-autosuggestions\n"
  fi
}
function up_oh_my_zsh {
  init_oh_my_zsh
  upgrade_oh_my_zsh
  pushd ~/.oh-my-zsh/custom/plugins/zsh-completions RNUL
  git pull --rebase
  popd > /dev/null
  pushd ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions RNUL
  git pull --rebase
  popd > /dev/null
}
##---------== update homebrew, oh-my-zsh, pip and source profile==------------##
function update_scripts {
  redecho "upgrade oh-my-zsh"
  up_oh_my_zsh
  if [[ $(uname) == "Darwin" ]]; then
    redecho "brew update"
    brew update
    redecho "brew outdated"
    brew outdated
    redecho "brew upgrade"
    brew upgrade
    redecho "brew cask update"
    brew cask update
    redecho "brew cask cleanup"
    brew cask cleanup
    redecho "brew cleanup"
    brew cleanup
    redecho "pip install --upgrade pip"
    pip install --upgrade pip
    # yellowecho "pip update package"
    # pip freeze --local | grep -v '^\-e' | cut -d = -f 1  |\
    # xargs -n1 pip install -U
  fi
  redecho "vundle update"
  up_vundle
  redecho "vundle clean"
  clean_vundle
  redecho "tmux tpm update"
  up_tmux_tpm
  redecho "tmux tpm clean"
  clean_tmux_tmp
  redecho "source tmux conf"
  tmux source ${HOME}/.tmux.conf
  redecho "source profile_wangxl"
  source ${HOME}/.profile_wangxl
}

## ========================================================================== ##
#                     ________      _______. __    __                          #
#                    |       /     /       ||  |  |  |                         #
#                    `---/  /     |   (----`|  |__|  |                         #
#                       /  /       \   \    |   __   |                         #
#                      /  /----.----)   |   |  |  |  |                         #
#                     /________|_______/    |__|  |__|                         #
## ========================================================================== ##
if [[ $options[extended_glob] == off ]]; then setopt extended_glob; fi
# Enable hidden files completion
# https://github.com/robbyrussell/oh-my-zsh/pull/4489#issuecomment-196992974
_comp_options+=(globdots)

# copied from meyering
setopt HIST_FIND_NO_DUPS
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_REDUCE_BLANKS
setopt HIST_SAVE_NO_DUPS
setopt INC_APPEND_HISTORY

## ========================================================================== ##
#                      _______  __  .___________.                              #
#                     /  _____||  | |           |                              #
#                    |  |  __  |  | `---|  |----`                              #
#                    |  | |_ | |  |     |  |                                   #
#                    |  |__| | |  |     |  |                                   #
#                     \______| |__|     |__|                                   #
## ========================================================================== ##
function xg_sl {
  local option=""
  # by default, zsh does not split word
  # three ways to enable spliting safely
  # ${=a}
  # ${(@s: :)a} ## retain empty strings with @
  # eval "(${a})"
  if [[ $# -eq 0 ]]; then option="-10"; else eval "option=(${@})"; fi
  # replace -10 with --all
  # git --no-pager log $option --stat --branches --graph --decorate --all
  local format="" # commit, date, branches, subject, author
  format="%C(bold cyan)%h%Creset - %Cred%aD%Creset "
  format+="%C(bold green)(%ar)%C(reset) %C(auto)%d%Creset%n"
  format+=" %C(yellow)%s%Creset %C(bold white)by%Creset "
  format+="%C(bold blue)%an%Creset"
  git --no-pager log \
    --abbrev-commit --stat --stat-graph-width=60 --graph --decorate --all \
    --pretty=tformat:$format \
    $option
}
function xg_sll { # long
  # get remote unpulled changes
  git fetch
  local format="" # commit, date, branches, subject, author
  format="%C(bold cyan)%h%Creset - %Cred%aD%Creset "
  format+="%C(bold green)(%ar)%C(reset) %C(auto)%d%Creset%n"
  format+="%C(yellow)%s%Creset %C(bold white)by%Creset "
  format+="%C(bold blue)%an%Creset"
  format+="%C(auto)%+b%Creset"
  git log \
    --abbrev-commit --stat --stat-graph-width=60 --graph --decorate --all \
    --pretty=tformat:$format
}
function _xg_sls {
  local pager_option=""
  [[ $1 == "--no-pager" ]] && pager_option="--no-pager"
  local format=""
  format="%C(bold cyan)%h%Creset - %C(bold green)(%ar)%Creset " # commmit, date
  format+="%C(yellow)%s%Creset %C(bold white)by%Creset "        # subject
  format+="%C(bold blue)%an%Creset %C(auto)%d%Creset"           # author, decor
  git $pager_option log \
    --abbrev-commit --graph --decorate --all --pretty=tformat:$format "${@:2}"
}
function xg_sls { # short
  local option=""
  if [[ $# -eq 0 ]]; then option="-20"; else eval "option=(${@})"; fi
  _xg_sls --no-pager $option
}
function xg_slo { # outgoing
  git fetch
  _xg_sls --no-pager $@ origin/master..
}
function xg_sli { # incoming
  git fetch
  _xg_sls --no-pager $@ ..origin/master
}
function xg_slf { # show changes against file/directory, alternativ: gitk
  if [[ $# == 0 ]]; then
    _xg_sls --pager --full-diff -p
  else
    _xg_sls --pager -p $@
  fi
}
function xg_slf5 { # show changes against file/directory, last 5 changes only
  if [[ $# == 0 ]]; then
    _xg_sls --no-pager -5 --full-diff -p
  else
    _xg_sls --no-pager -5 -p $@
  fi
}
function xg_ls {  # list all file tracked under master
  git ls-tree -r --name-only ${@:-HEAD}
}
alias xg_ls_ignored="git ls-files --ignored --exclude-standard --others"
alias xg_ls_untracked="git ls-files --exclude-standard --others"
alias xg_st='git status'
alias xg_fetch_st='git fetch; git status;'
function xg_rm_last_commit {
  local ans=""
  redecho -n "Delete Last Commit [Y/N]? "
  read ans
  ans=$(echo ${ans} | tr "[:upper:]" "[:lower:]")
  if [[ $ans == yes || $ans == y ]]; then
    cyanecho "deleting..."
    git reset --hard "HEAD^"
  else
    cyanecho "do nothing, exit..."
  fi
}
alias xg_rk_last_commit='git reset --soft "HEAD^"'
alias xg_browse='hub browse'
alias xg_list_remote_repo_branch='git ls-remote origin'
alias xg_show_remote_repo='git remote show origin'
alias xg_dry_run_featch='git fetch --dry-run'
function xg_check_remote_up_2_date {
  if [[ -z $(git fetch --dry-run 3>&2 2>&1 1>&3) ]]
  then
    cyanecho "Git: up to date"
  else
    redecho "Git: need update"
  fi
}
alias xg_diff="git diff HEAD"
alias xg_ddiff='git diff "HEAD^"'
alias xg_ca="git commit -v -a --amend --no-edit"
function xg_clone {
  git clone git@github.com:$(git config github.user)/$1.git
}
function github_short_url {
  curl -isS https://git.io -F "url=$1" | sed -rn 's/^Location: (.*)$/\1/p'
}
function github_short_url_to_clipboard {
  local url="$(github_short_url $1)"
  echo $url | pbcopy
  echo $url
}
# dev git proxy
alias extgit='git -c http.proxy=fwdproxy:8080 -c'`
             `'core.gitproxy=$HOME/bin/git-proxy-wrapper'

## ========================================================================== ##
#             .______   .______      ___________    __    ____                 #
#             |   _  \  |   _  \    |   ____\   \  /  \  /   /                 #
#             |  |_)  | |  |_)  |   |  |__   \   \/    \/   /                  #
#             |   _  <  |      /    |   __|   \            /                   #
#             |  |_)  | |  |\  \----|  |____   \    /\    /                    #
#             |______/  | _| `._____|_______|   \__/  \__/                     #
## ========================================================================== ##
# homebrew api token
if [[ $(uname) == "Darwin" ]] && [[ -n "$(which brew 2>/dev/null)"  ]]; then
  if [[ -f  ~/Dropbox/Tools/secrets/homebrew_github_api_token ]]; then
    export HOMEBREW_GITHUB_API_TOKEN=$(cat \
      ~/Dropbox/Tools/secrets/homebrew_github_api_token)
  else
    redecho "cannot find file ~/Dropbox/Tools/secrets/homebrew_github_api_token"
    redecho "fix dropbox missing problem"
  fi
fi

## ========================================================================== ##
#                   .___  ___.  __       _______.  ______                      #
#                   |   \/   | |  |     /       | /      |                     #
#                   |  \  /  | |  |    |   (----`|  ,----'                     #
#                   |  |\/|  | |  |     \   \    |  |                          #
#                   |  |  |  | |  | .----)   |   |  `----.                     #
#                   |__|  |__| |__| |_______/     \______|                     #
## ========================================================================== ##
alias run_matlab="matlab -nodesktop -nosplash -r"
alias mosh="mosh --family=prefer-inet6"
export EDITOR="vim"
function yapf {
  $(whence -p yapf) \
    --style="{based_on_style:facebook,indent_width:4,column_limit:79}" $@
}
# alias killall="killall -u $USER"
alias killall="loginctl terminate-user $USER"
alias ka="\killall -u $USER" #  disables the alias in interactive shell
alias upld="${HOME}/misc/scripts/sync.sh"

## ========================================================================== ##
#     __  .______   ____    ____ .___________.__    __    ______   .__   __.   #
#    |  | |   _  \  \   \  /   / |           |  |  |  |  /  __  \  |  \ |  |   #
#    |  | |  |_)  |  \   \/   /  `---|  |----|  |__|  | |  |  |  | |   \|  |   #
#    |  | |   ___/    \_    _/       |  |    |   __   | |  |  |  | |  . `  |   #
#    |  | |  |          |  |         |  |    |  |  |  | |  `--'  | |  |\   |   #
#    |__| | _|          |__|         |__|    |__|  |__|  \______/  |__| \__|   #
## ========================================================================== ##
function start_local_ipython {
  [[ $# == 1 ]] && { pushd $1; } || { pushd ${HOME}/Dropbox/workspace/ipython; }
  jupyter notebook --port=8889;
  popd;
}
function start_timan_tunnel { #silently starting
  ssh -N -f -L localhost:8889:localhost:8889 timan101
}
function start_dev_tunnel { #silently starting
  ssh -N -f -L localhost:8888:localhost:8888 dev
}
function kill_timan_tunnel_ipython {
  # quote the command substitution
  # stackoverflow.com/questions/31521221/zsh-local-keyword-not-an-identifier
  local pids="$(ps aux | \
               grep 'ssh -N -f -L localhost:8889:localhost:8889 timan101' | \
               awk '{print $2}')"
  for i in ${=pids};
  do
    local comm=$(ps -p $i -o comm=)
    if [[ $comm == ssh* ]]; then
      redecho "kill PID:($i) "$comm
      kill -9 $i
    fi
  done
}
# # A function to launch ipython notebooks
function ifbpynb {
    pushd ~/python;
    /usr/local/bin/ifbpy notebook --profile=nbserver;
    popd;
}
# # ai_bb
alias ai_bb="buck build -c fbcode.platform=gcc-4.9-glibc-2.20"
function itorch {
  pushd ~/fbcode;
  torch/fb/fbitorch/run.sh notebook --notebook-dir=~/notebooks --no-browser;
  popd;
}
# # Caffe2 ifbpy
function ifbpynb_c2 {
  pushd ~/fbcode
  caffe2/caffe2/fb/ifbpy/run_ifbpy.sh
  popd
}
function ifb2pynb_c2 {
  # ipython_setup
  pushd ~/fbcode2
  caffe2/caffe2/fb/ifbpy/run_ifbpy.sh
  popd
}
function ifb3pynb_c2 {
  pushd ~/fbcode3
  caffe2/caffe2/fb/ifbpy/run_ifbpy.sh
  popd
}
function ifbpy_c2 {
  pushd ~/fbcode
  #!/bin/bash
  # This launches an ipython notebook. Usage:
  #    run_ifbpy.sh [slim]
  # Slim is without facebook dependencies so it compiles faster.

  TARGET=caffe2/caffe2/fb/ifbpy
  EXT=$1
  if [[ "$EXT" == "slim" ]]; then
    EXT="_slim"
  fi

  export OMP_NUM_THREADS=8

  # symb link the aiplatform files so that we can access them without exposing
  # the aiplatform gfsai path should we need to open source the tutorials.
  NOTEBOOKS=$HOME/caffe2_notebooks
  mkdir -p $NOTEBOOKS
  ln -sfT /mnt/vol/gfsai-oregon/aml/users/aiplatform $NOTEBOOKS/tutorial_data

  # We can't use buck run here because it will block all other attempts to build
  # with buck while ifbpy notebook is running.
  buck build @mode/opt -c fbcode.platform=gcc-4.9-glibc-2.20 \
        -c python.package_style=inplace \
        ${TARGET}:ifbpy${EXT}

  ./buck-out/gen/${TARGET}/ifbpy${EXT}.par
  popd
}
alias cat_flow_log='cat ~/fbcode/experimental/xlwang/ipy_flow_debug.log'
function less_flow_log {
  pygmentize -O full,style=monokai -l ocaml \
    ~/fbcode/experimental/xlwang/ipy_flow_debug.log | less -R +G
}


## ========================================================================== ##
#                               _______ .______                                #
#                              |   ____||   _  \                               #
#                              |  |__   |  |_)  |                              #
#                              |   __|  |   _  <                               #
#                              |  |     |  |_)  |                              #
#                              |__|     |______/                               #
## ========================================================================== ##
alias arc_lint="arc lint --engine HowtoevenLintEngine"
alias arc_up_msg="hg commit --amend && arc diff --verbatim"
alias arc_stack_diff="for-each-stacked submit-stacked-diff"
function hnext {
  local num=${1:=1}
  for i in $(seq 1 $1);
  do
    hg next
  done
}
function hprev {
  local num=${1:=1}
  for i in $(seq 1 $1);
  do
    hg prev
  done
}
alias hum="hg up master"
alias hu="hg up"
alias ha="hg add"
alias hc="hg commit"
alias hc!="hg amend --rebase"
alias hca="hg add; hg commit"
alias hca!="hg add; hg amend --rebase"
alias hls="hg log --stat -l1"
alias hlsf="hg log --stat -l1 | fpp"
alias hs="hg st && hg smartlog -T '{xg_sl}'"
alias hst="hg st"
alias hstf="hg st | fpp"
alias hsl=" hg smartlog -T '{xg_sl}'"
alias hsf="hg st | fpp"
alias hd='hg diff'
alias hdh='hg diff -r ".^"'
alias hhl='hg pull'
alias hhp='arc diff'
alias hrb='hg rebase'
alias hid='hg id -i'
alias hg_query_author="hg log -r . --template '{sl_user}'"
alias hg_query_diff="hg log -r . --template '{sl_diff_super}'"
alias hrf='hhl && arc cleanup-features && hum && hs'
alias hhpur='hhl && arc cleanup-features && hrb -d master && hs'
alias hrv='hg revert'
alias hg_help="cat ~/misc/scripts/hg_help.txt"
alias flow_help="cat ~/misc/scripts/flow_help.txt"
alias dev_help="cat ~/misc/scripts/dev_help.txt"
alias bbt='buck test'
alias bbb='buck build'
alias bbr='buck run'
alias fbc='cd ~/fbcode'
alias fbc1='cd ~/fbcode'
alias fbc2='cd ~/fbcode2'
alias fbc3='cd ~/fbcode3'
alias cf='cd ~/configerator'
alias canary_workflow='~/misc/scripts/canary_workflow.sh'
function fbtmux {
  fbc2
  tmux new-window -t 2 -c $(readlink -f ~/fbcode)
  tmux new-window -t 3 -c $(readlink -f ~/fbcode)
  tmux new-window -t 4 -c $(readlink -f ~/fbcode3)
  tmux setw -t 1 allow-rename off
  tmux rename-window -t 1 "ipy"
  tmux setw -t 2 allow-rename off
  tmux rename-window -t 2 "fbc"
  tmux setw -t 3 allow-rename off
  tmux rename-window -t 3 "run"
  tmux setw -t 4 allow-rename off
  tmux rename-window -t 4 "fbc3"
  tmux send-keys -t 1.1 "tmux split-window -t 1.1" C-m
  tmux send-keys -t 1.1 "tmux send-keys -t 1.2 ifb2pynb_c2 C-m" C-m
  tmux send-keys -t 1.1 \
    "tmux send-keys -t 1.1 -R; tmux clear-history -t 1.1" C-m
  tmux send-keys -t 1.1 "happy_coding" C-m
}
function run_dper_integration_tests {
  pushd ~/fbcode
  cyanecho """
  ~/fbcode/fblearner/flow/run_integration_tests
    --mode opt
    --timeout 7200
    --entitlement 'integration_tests'
    --owner fblearner_realtime
    --project-name aml.dper2
  """
  ~/fbcode/fblearner/flow/run_integration_tests \
    --mode opt \
    --timeout 7200 \
    --entitlement 'integration_tests' \
    --owner fblearner_realtime \
    --project-name aml.dper2 $@
  popd
}
function happy_coding {
  local happy=$(cat ~/misc/scripts/happy_coding.txt | head -n 9)
  local coding=$(cat ~/misc/scripts/happy_coding.txt | tail -n 10)
  cyanecho $happy
  yellowecho $coding
}
function buck_gen_cc {
  buck build --show-output $1\#compilation-database
}
alias buck_util='~/misc/scripts/buck_utils.py'
function flow_util {
  local bin=~/fbcode/buck-out/gen/experimental/xlwang/flow_util.par
  local pyf=~/fbcode/experimental/xlwang/flow_util.py
  local src=~/misc/scripts/flow_util.py
  cur_pwd=$(pwd)
  if [[ ! -e "$bin" ]]; then
    redecho "missing $bin! build!"
    if [[ ! -e "$pyf" ]]; then
      if [[ ! -e "$src" ]]; then
        redecho "$src does not exist! abort!"
        exit
      fi
      ln -s "$src" "$pyf"
    fi
    cd ~/fbcode
    buck build //experimental/xlwang:flow_util
    cd $cur_pwd
  fi
  "$bin" $@
}
function get_duf {
  local f=$1
  f=$(readlink -f ${f})
  local u
  if [[ ${f} == *fbcode* ]]; then
    u="https://phabricator.intern.facebook.com/diffusion/FBS/browse/master/"
    u+="fbcode/"
    u+=$(echo ${f} | sed 's/.*fbcode\/\(.*\)/\1/')
  fi
  echo $u
}
function get_blamef {
  local f=$1
  f=$(readlink -f ${f})
  local u
  if [[ ${f} == *fbcode* ]]; then
    u="https://phabricator.intern.facebook.com/diffusion/FBS/browse/master/"
    u+="fbcode/"
    u+=$(echo ${f} | sed 's/.*fbcode\/\(.*\)/\1/')"?blame=1"
  fi
  echo $u
}
# bookmark management z and v
[ -f ~/misc/scripts/z.sh ] && source ~/misc/scripts/z.sh
[ -f ~/misc/scripts/v.sh ] && source ~/misc/scripts/v
alias v="~/misc/scripts/v"
# zsh
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
export FZF_DEFAULT_OPTS="--height 40% --reverse --border --multi --cycle \
--bind=ctrl-h:backward-char,ctrl-l:forward-char,ctrl-space:accept,\
ctrl-d:backward-delete-char,ctrl-f:page-down,ctrl-b:page-up,ctrl-s:toggle \
--inline-info \
--color fg:252,bg:233,hl:81,fg+:252,bg+:235,hl+:118 \
--color info:144,prompt:161,spinner:135,pointer:196,marker:208"
export FZF_DEFAULT_COMMAND='ag -g ""'
export FZF_CTRL_T_OPTS="--preview '(highlight -O ansi -l {} 2> /dev/null \
|| cat {} || tree -C {}) 2> /dev/null | head -200'"
# export FZF_CTRL_R_OPTS="--preview 'echo {}' \
  # --preview-window down:3:hidden:wrap --bind '?:toggle-preview'"
function vfzf { vim $(fzf); }
function ffzf {
  IFS=$'\n' out=($(eval "$1" | \
    fzf --query="$3" --expect=ctrl-o,ctrl-e,ctrl-v,ctrl-x --prompt="$2"))
  local first_line=$(head -n 1 <<< "$out")
  local files
  local opt
  local file
  local key
  if [[ "$first_line" == ctrl* ]]; then
    files=$(tail -n +2 <<< "$out")
    key="$first_line"
  else
    files="$out"
    key=""
  fi
  if [ -z "$files" ]; then
    return
  fi
  if [[ -z "$key" || "$key" == ctrl-x || "$key" == ctrl-v ]]; then
    if [[ "$key" == ctrl-x ]]; then
      opt="-o"
    elif [[ "$key" == ctrl-v ]]; then
      opt="-O"
    else
      opt=""
    fi
    local cmd="${EDITOR:-vim} $opt $(echo ${files} |  tr '\n' ' ')"
    echo $cmd
    eval ${cmd}
  else
    for file in ${(f)files}; do
      if [[ "$key" = ctrl-o ]]; then
        get_duf "$file"
      elif [[ "$key" == ctrl-e ]]; then
        get_blamef "$file"
      fi
    done
  fi
}
function fb1 {
  local query="find \
    ~/fbcode/{sigrid,fblearner,caffe2,experimental/xlwang} -type f"
  local prompt="fbcode> "
  ffzf $query $prompt $1
}
function fb2 {
  local query="find \
    ~/fbcode2/{sigrid,fblearner,caffe2,experimental/xlwang} -type f"
  local prompt="fbcode2> "
  ffzf $query $prompt $1
}
function fb3 {
  local query="find \
    ~/fbcode3/{sigrid,fblearner,caffe2,experimental/xlwang} -type f"
  local prompt="fbcode3> "
  ffzf $query $prompt $1
}
function fb {
  local cwd=$(readlink -f .)
  local cmd="fb1"
  if [[ $cwd == *"fbsource2"* ]]; then
    cmd="fb2"
  elif [[ $cwd == *"fbsource3"* ]]; then
    cmd="fb3"
  fi
  $cmd $@
}
function ff {
  IFS=$'\n' out=($(fzf --query="$1" \
    --expect=ctrl-o,ctrl-e,ctrl-v,ctrl-x --prompt="files> "))
  local first_line=$(head -n 1 <<< "$out")
  local files
  local opt
  local file
  local key
  if [[ "$first_line" == ctrl* ]]; then
    files=$(tail -n +2 <<< "$out")
    key="$first_line"
  else
    files="$out"
    key=""
  fi
  if [ -z "$files" ]; then
    return
  fi
  if [[ -z "$key" || "$key" == ctrl-x || "$key" == ctrl-v ]]; then
    if [[ "$key" == ctrl-x ]]; then
      opt="-o"
    elif [[ "$key" == ctrl-v ]]; then
      opt="-O"
    else
      opt=""
    fi
    local cmd="${EDITOR:-vim} $opt $(echo ${files} |  tr '\n' ' ')"
    echo $cmd
    eval ${cmd}
  else
    for file in ${(f)files}; do
      if [[ "$key" = ctrl-o ]]; then
        get_duf "$file"
      elif [[ "$key" == ctrl-e ]]; then
        get_blamef "$file"
      fi
    done
  fi
}
# fd - search directory including hidden directories
fd() {
  local dir
  local input
   [[ $# -gt 0 && -d $1 ]] && \
     { [[ $1 == */ ]] && { input=$1 } || { input=$1/ } } || \
     { input=. }
  dir=$(find ${input} -type d 2> /dev/null | fzf +m --prompt="dir> ") \
    && cd "$dir"
}
# v - open files in ~/.viminfo
v() {
  local files
  files=$(grep '^>' ~/.viminfo | cut -c3- |
    while read line; do
    [ -f "${line/\~/$HOME}" ] && echo "$line"
    done | fzf --prompt="vim-hist> " -d -m -q "$*" -1) && vim ${files//\~/$HOME}
}
# z - open directories
unalias z 2> /dev/null
z() {
  [ $# -gt 0 ] && _z "$*" && return
  cd "$(_z -l 2>&1 | fzf --prompt="dir-hist> " +s +m --tac --query "$*" \
    | sed 's/^[0-9,.]* *//')"
}
# Kerberos
function krefresh() {
  kdestroy
  kinit
  klist
}


## ========================================================================== ##
#             ___________    ____  _______.___________._______ .___  ___.      #
#            /       \   \  /   / /       |           |   ____||   \/   |      #
#           |   (----`\   \/   / |   (----`---|  |----|  |__   |  \  /  |      #
#            \   \     \_    _/   \   \       |  |    |   __|  |  |\/|  |      #
#        .----)   |      |  | .----)   |      |  |    |  |____ |  |  |  |      #
#        |________..________| ________/ ______|___   _____________| ______     #
#         /       ||   _  \  |   ____| /      ||  | |   ____||  |  /      |    #
#        |   (----`|  |_)  | |  |__   |  ,----'|  | |  |__   |  | |  ,----'    #
#         \   \    |   ___/  |   __|  |  |     |  | |   __|  |  | |  |         #
#     .----)   |   |  |      |  |____ |  `----.|  | |  |     |  | |  `----.    #
#     |_______/    | _|      |_______| \______||__| |__|     |__|  \______|    #
## ========================================================================== ##
if [[ $(uname) == "Darwin" ]]; then
  source ${HOME}/misc/dotfiles/lib/.profile_wangxl_darwin
elif [[ $(uname) == "Linux" ]]; then
  source ${HOME}/misc/dotfiles/lib/.profile_wangxl_linux
fi
