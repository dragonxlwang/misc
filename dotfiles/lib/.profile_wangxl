#!/bin/sh

# color
function yellowecho { echo -e "\033[1;33m${1}\033[0m" }
function blueecho { echo -e "\033[1;36m${1}\033[0m" }
function redecho { echo -e "\033[1;31m${1}\033[0m" }
function greenecho { echo -e "\033[1;32m${1}\033[0m" }

ANSI_COLOR_RED="\033[31m"   # \e vs \033
ANSI_COLOR_RESET="\033[0m"

# function and alias
function work { tmux new -AD -s $(hostname -s)-main }
## ls -A: List all entries except for . and ...
## zsh f expansion flag to split on newline: arr_of_lns=("${(@f)$(my_cmd)}")
## @: In double quotes, array elements are put into separate words.
##    E.g., ‘"${(@)foo}"’ is equivalent to ‘"${foo[@]}"’ and ‘"${(@)foo[1,2]}"’
##    is the same as ‘"$foo[1]" "$foo[2]"’.
##    This is distinct from field splitting by the f, s or z flags, which still
##    applies within each array element.
## unix.stackexchange.com/questions/28854/list-elements-with-spaces-in-zsh
alias dir_size='for f in "${(@f)$(ls -A)}"; do du -sh $f; done;'
## show history with time, increase history size
## https://github.com/robbyrussell/oh-my-zsh/issues/739
## ./.oh-my-zsh/lib/history.zsh
## "mm/dd/yyyy":  -f
## "dd.mm.yyyy":  -E
## "yyyy-mm-dd":  -i
## HISTSIZE is the maximum number of lines that are kept in a session and
## SAVEHIST is the maximum number of lines that are kept in the history file.
alias history='fc -i -l 1'
# oh-my-zsh/plugins/history/history.plugin.zsh
function hs { history | grep $* }
alias hsi='hs -i'
# real remove vs save remove
alias rrm='/bin/rm -v'
function rm {
  local ret=""
  ret=$(mv --verbose -f --backup=numbered \
        --target-directory ${HOME}/.trash/ "$@")
  echo -e $ANSI_COLOR_RED$ret$ANSI_COLOR_RESET
  local reg=""
  local f1=""
  local f2=""
  local fp="${HOME}/.trash/rm.undo"
  echo "#!/bin/sh" > $fp
  for l in ${(f)ret}; do
    reg='s/^(.*) -> (.*)$/\1/p'
    f1=$(echo $l | sed -rn $reg)
    f1=${f1:1:${#f1}-2}
    reg='s/^(.*) -> (.*)$/\2/p'
    f2=$(echo $l | sed -rn $reg)
    f2=$(echo $f2 | sed -r 's/ \(backup: .*\)//')
    f2=${f2:1:${#f2}-2}
    [[ $f1 != /* ]] && f1="$PWD/$f1"
    echo "# \"$f1\" -> \"$f2\"" >> $fp
    echo "mv \"$f2\" \"$f1\"" >> $fp
    echo "echo \"\\033[1;33mmv \\\"$f2\\\" \\\"$f1\\\"\\033[0m\"" >> $fp
  done
}
function undo {
  local fp="${HOME}/.trash/rm.undo"
  /bin/sh $fp
}
alias empty_trash='/bin/rm -rf --verbose  ~/.trash/*'
alias cls='printf "\033c"'
alias run_matlab="matlab -nodesktop -nosplash -r"
alias echo_path='echo ${PATH//:/"\n"}'
alias ll="ls -alh"
function ll_symlink {
    [[ $# -eq 1 ]] && { ll $1 | grep "\->"} || {ll | grep "\->"} }
function kill_jobs { for i in $(seq 1 $(jobs | wc -l)); do kill %$i; done }
alias kill_tmux='tmux kill-session'
function jump { if [[ $# -eq 1 ]]; then cd $1; fi; cd $(pwd -P); }
function follow { cd $(dirname $(readlink -f $1)) }
alias jp="jump"
alias fl="follow"

function edit_then_source { vim $1; yellowecho "sourcing $1"; source $1; }
function ed_profile {
  local f1="${HOME}/misc/dotfiles/lib/.profile_wangxl"
  local f2="${HOME}/misc/dotfiles/lib/.profile_wangxl_darwin"
  local f3="${HOME}/misc/dotfiles/lib/.profile_wangxl_linux"
  vim $f1 $f2 $f3
  yellowecho "sourcing ~/.profile_wangxl"
  source ${HOME}/.profile_wangxl
}
function ed_profile_darwin {
  edit_then_source ${HOME}/misc/dotfiles/lib/.profile_wangxl_darwin
}
function ed_profile_linux {
  edit_then_source ${HOME}/misc/dotfiles/lib/.profile_wangxl_linux
}
alias ed_tmux="vim ~/.tmux.conf; tmux source-file ~/.tmux.conf"
function ed_misc {
  local diff_cmd=" | vertical all | windo diffthis"
  local cmd1='args ~/misc/dotfiles/lib/.profile_wangxl | '
  cmd1+='bel split ~/misc/dotfiles/lib/.profile_wangxl_darwin | '
  cmd1+='bel vsplit ~/misc/dotfiles/lib/.profile_wangxl_linux | wincmd w'
  local cmd2='e ~/misc/dotfiles/lib/.tmux.conf'
  local cmd3='e ~/misc/dotfiles/lib/.vimrc'
  vim -c "$cmd1" -c "tabnew" \
      -c "$cmd2" -c "tabnew" \
      -c "$cmd3" -c "tabn1"
  yellowecho "sourcing ~/.profile_wangxl"
  source ${HOME}/.profile_wangxl
  yellowecho "sourcing ~/.tmux.conf"
  tmux source-file ${HOME}/.tmux.conf
}
function ed_scripts {
  local f1="${HOME}/misc/dotfiles/scripts/setup_symlinks.sh"
  local f2="${HOME}/misc/dotfiles/scripts/quick_install.sh"
  vim $f1 $f2
}
function up_profile {
  yellowecho "sourcing ${HOME}/.profile_wangxl"
  source ${HOME}/.profile_wangxl
  yellowecho "sourcing ${HOME}/.tmux.conf"
  tmux source-file ${HOME}/.tmux.conf
}
# oh-my-zsh/plugins/vundle/vundle.plugin.zsh
# https://github.com/VundleVim/Vundle.vim
function init_vundle {
  if [[ ! -d ~/.vim/bundle/Vundle.vim/.git ]] && \
     [[ ! -f ~/.vim/bundle/Vundle.vim/.git ]]; then
    git clone https://github.com/VundleVim/Vundle.vim.git \
      ~/.vim/bundle/Vundle.vim
    echo "\n\tRead about vim configuration for vundle" \
         " at https://github.com/VundleVim/Vundle.vim\n"
  fi
}
alias up_vundle="init_vundle; vim +PluginInstall +qall"
alias update_vundle="init_vundle; vim +PluginInstall! +qall"
alias clean_vundle="init_vundle; vim +PluginClean! +qall"
function init_tmux_tpm {
  if [[ ! -d ~/.tmux/plugins/tpm/.git ]] && \
     [[ ! -f ~/.tmux/plugins/tpm/.git ]]; then
    git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
    echo "\n\tRead about tmux tpm configuration for vundle" \
         " at https://github.com/tmux-plugins/tpm\n"
    yellowecho "prefix + I : install new plugins"
    yellowecho "prefix + U : updates plugin(s)"
    yellowecho "prefix + alt + u : remove/uninstall plugins not on the list"
  fi
}
alias up_tmux_tpm="init_tmux_tpm; ~/.tmux/plugins/tpm/bin/install_plugins"
alias clean_tmux_tmp="init_tmux_tpm; ~/.tmux/plugins/tpm/bin/clean_plugins"
function up_symlinks {
  local opt=""
  [[ $(uname) == "Darwin" ]] && opt="mac"
  [[ $(uname) == "Linux" ]] && opt="timan"
  yellowecho "setup symlinks for $opt"
  ${HOME}/misc/dotfiles/scripts/setup_symlinks.sh $opt --no-confirm
}

# zsh
if [[ $options[extended_glob] == off ]]; then setopt extended_glob; fi

# git
function xg_sl {
  local option=""
  # by default, zsh does not split word
  # three ways to enable spliting safely
  # ${=a}
  # ${(@s: :)a} ## retain empty strings with @
  # eval "(${a})"
  if [[ $# -eq 0 ]]; then option="-10"; else eval "option=(${@})"; fi
  # replace -10 with --all
  git --no-pager log $option --branches --graph --decorate --all
}
function xg_sl_outgoing {
  git fetch
  git --no-pager log --branches --decorate --graph origin/master.. $@
}
function xg_sl_incoming {
  git fetch
  git --no-pager log --branches --decorate --graph ..origin/master $@
}
function xg_ls {
  git ls-tree -r --name-only ${@:-HEAD}
}
alias xg_ls_ignored="git ls-files --ignored --exclude-standard --others"
alias xg_ls_untracked="git ls-files --exclude-standard --others"
alias xg_st='git status'
function xg_rm_last_commit {
  local ans=""
  echo -ne "${ANSI_COLOR_RED}Delete Last Commit [Y/N]?${ANSI_COLOR_RESET} "
  read ans
  ans=$(echo ${ans} | tr "[:upper:]" "[:lower:]")
  if [[ $ans == yes || $ans == y ]]; then
    yellowecho "deleting..."
    git reset --hard "HEAD^"
  else
    yellowecho "do nothing, exit..."
  fi
}
alias xg_rk_last_commit='git reset --soft "HEAD^"'
alias xg_browse='hub browse'
alias xg_list_remote_repo_branch='git ls-remote origin'
alias xg_show_remote_repo='git remote show origin'
alias xg_dry_run_featch='git fetch --dry-run'
function xg_check_remote_up_2_date {
  if [[ -z $(git fetch --dry-run 3>&2 2>&1 1>&3) ]]
  then
    blueecho "Git: up to date"
  else
    redecho "Git: need update"
  fi
}
alias xg_diff="git diff HEAD"
alias xg_ca="git commit -v -a --amend --no-edit"

# Enable hidden files completion
# https://github.com/robbyrussell/oh-my-zsh/pull/4489#issuecomment-196992974
_comp_options+=(globdots)

if [[ $(uname) == "Darwin" ]]; then
  source ${HOME}/misc/dotfiles/lib/.profile_wangxl_darwin
elif [[ $(uname) == "Linux" ]]; then
  source ${HOME}/misc/dotfiles/lib/.profile_wangxl_linux
fi
