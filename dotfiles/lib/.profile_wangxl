#!/bin/sh
## ========================================================================== ##
#       ______   ______    __        ______   .______          _______.        #
#      /      | /  __  \  |  |      /  __  \  |   _  \        /       |        #
#     |  ,----'|  |  |  | |  |     |  |  |  | |  |_)  |      |   (----`        #
#     |  |     |  |  |  | |  |     |  |  |  | |      /        \   \            #
#     |  `----.|  `--'  | |  `----.|  `--'  | |  |\  \----.----)   |           #
#      \______| \______/  |_______| \______/  | _| `._____|_______/            #
## ========================================================================== ##
# print with or without newline
function _color_echo {
  if [[ "$2" == "-n" ]]; then echo -ne "\033[${1}${@:3}\033[0m"
  else echo -e "\033[${1}${@:2}\033[0m"; fi }
function blackecho    { _color_echo "1;30m" "${@}" }
function redecho      { _color_echo "1;31m" "${@}" }
function greenecho    { _color_echo "1;32m" "${@}" }
function yellowecho   { _color_echo "1;33m" "${@}" }
function blueecho     { _color_echo "1;34m" "${@}" }
function magentaecho  { _color_echo "1;35m" "${@}" }
function cyanecho     { _color_echo "1;36m" "${@}" }
function whiteecho    { _color_echo "1;37m" "${@}" }

## ========================================================================== ##
#               ___       __       __       ___           _______.             #
#              /   \     |  |     |  |     /   \         /       |             #
#             /  ^  \    |  |     |  |    /  ^  \       |   (----`             #
#            /  /_\  \   |  |     |  |   /  /_\  \       \   \                 #
#           /  _____  \  |  `----.|  |  /  _____  \  .----)   |                #
#          /__/     \__\ |_______||__| /__/     \__\ |_______/                 #
## ========================================================================== ##
##-------------------------------== general ==--------------------------------##
function test_alias_exist { alias $1 2>/dev/null >/dev/null }
function work { tmux new -AD -s $(hostname -s)-main }
function exe_remote_script {
  eval "$(curl -fsSL $1)"
}
alias help='man'
function echo_path { echo ${${1:-$PATH}//:/$'\n'} }
function colorize_column {
  local s="$(sed "s/[^[:blank:]]\{1,\}/\\\\033[${1}&\\\\033[0m/${2}")"
  echo -e $s
}
##--------------------------------== admin ==---------------------------------##
function _psfmt {
  if [[ $(uname) == "Linux" ]]; then
    # only gnu ps has tid option
    local fmt="user,tid,ppid,pcpu,cpu,pmem,rss,tty,state,pri,nice,start,time"
  else
    local fmt="user,pid,ppid,pcpu,cpu,pmem,rss,tty,state,pri,nice,start,time"
  fi
  if [[ $1 == "comm" ]]; then
    fmt+=",comm"
  else
    fmt+=",command"
  fi
  if [[ $(uname) == "Linux" ]]; then
    echo "$(ps -e H -o $fmt)"
  else
    echo "$(ps -e -o $fmt)"
  fi
}
function pscpu {
  local s="$(_psfmt comm)"
  local h="$(echo $s | head -1)"
  local b="$(echo $s | sed 1d)"
  greenecho $h
  b="$(echo $b | sort -k4 -rn)"
  echo "$b" | head $@ | colorize_column "1;36m" 4
}
function psmem {
  local s="$(_psfmt comm)"
  local h="$(echo $s | head -1)"
  local b="$(echo $s | sed 1d)"
  greenecho $h
  b="$(echo $b | sort -k7 -rn)"
  echo "$b" | head $@ | colorize_column "1;36m" 7
}
function psmine {
  local u=$(whoami)
  local s="$(_psfmt comm)"
  local h="$(echo $s | head -1)"
  local b="$(echo $s | sed 1d)"
  greenecho $h
  b="$(echo $b | awk -v var=${u} '{if ($1 == var) {print $0} }')"
  echo "$b" | colorize_column "1;36m" 1
}
alias pscmd='print -l ${(o)history%% *} | uniq -c | sort -nr | head'
# case insensitive grep
function psgrep { _psfmt | grep -i $1 --color=always | grep -v grep }
function pszombies { _psfmt "comm" | awk '{ if ($9 == "Z") {print $0} }' }
# ps pid
function pspidgrep { _psfmt | grep -i $1 | grep -v grep | awk '{print $2}' }
function pspidmine { psmine | sed 1d | awk '{print $2}' }
# case sensitive kill
function pskill {
  ps aux | grep -v "grep" | grep "$@" | awk '{print $2}' | xargs kill -9 }
# kill from joblist
function kill_jobs {
  if [[ -n $(jobs) ]];
  then
    for i in $(seq 1 $(jobs | wc -l));
    do kill -9 %$i;
    done
  fi
}
alias kill_tmux='tmux kill-session'
function kill_zombies {
  ps -e -o pid,state | awk '{ if ($2 == "Z") {print $1} }' | xargs  kill -9 }
alias cls='printf "\033c"'
alias kt='kill_tmux'
alias ht='tmux detach'
function q {
  if [[ -z $TMUX ]]; then
    exit
  else
    tmux detach
  fi
}
function check_busy { lsof +D ${@:-.} }
alias nicer="sudo renice -20"
alias unnice="renice 0"
function nicer_all {
  local ni=${1:-"-20"}
  for x in "${(@f)$(pspidmine)}";
  do
   redecho "renice $ni $x"
   sudo renice ${ni} ${x}
 done
}
function unnice_all {
  for x in "${(@f)$(pspidmine)}";
  do
   redecho "nicer ${x}"
   unnice ${x}
 done
}
##------------------------------== file list ==-------------------------------##
## ls -A: List all entries except for . and ...
## zsh f expansion flag to split on newline: arr_of_lns=("${(@f)$(my_cmd)}")
## @: In double quotes, array elements are put into separate words.
##    E.g., ‘"${(@)foo}"’ is equivalent to ‘"${foo[@]}"’ and ‘"${(@)foo[1,2]}"’
##    is the same as ‘"$foo[1]" "$foo[2]"’.
##    This is distinct from field splitting by the f, s or z flags, which still
##    applies within each array element.
## unix.stackexchange.com/questions/28854/list-elements-with-spaces-in-zsh
alias ls_dir_size='for f in "${(@f)$(ls -A)}"; do du -sh $f; done;'
function lsds {
  local du_ver=$(du --version | sed '1q;d' | sed 's/[^0-9.]*\([0-9.]*\).*/\1/')
  if [[ $du_ver -le 8.25 ]]; then
    du -ahd1
  else
    du -ah --max-depth 1
  fi
}
alias dls='find . -maxdepth 1 -type d'
# ls
alias ll="ls -alh"
alias llt="ll -t"
function lll { ll $@ --color=always | less }
alias lllt="lll -t"
function lls { ll | grep $* }
alias llsi='lls -i'
function ll_symlink {
    ll "$@" --color=always | grep "\->" }
# cd
function jump { if [[ $# -eq 1 ]]; then cd $1; fi; cd $(pwd -P); }
function follow { cd $(dirname $(readlink -f $1)) }
alias jp="jump"
alias fl="follow"
# tree might not installed; use ugly tree instead
if [ -z "\${which tree}" ]; then
  tree () {
      find $@ -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'
  }
fi
# gather external ip address
alias show_external_ip="curl -s -S https://icanhazip.com"
alias showptr="curl -s -S -k https://icanhazptr.com"
# gather external/local ip address
alias showip="${HOME}/misc/scripts/ip_lookup.sh all"
##--------------------------------== remove ==--------------------------------##
# real remove
alias rrm='/bin/rm -v'
function rm {
  local ret=""
  ret=$(mv --verbose -f --backup=numbered \
        --target-directory ${HOME}/.Trash/ "$@")
  redecho $ret
  local reg=""
  local f1=""
  local f2=""
  local fp="${HOME}/.Trash/rm.undo"
  echo "#!/bin/sh" > $fp
  for l in ${(f)ret}; do
    reg='s/^(.*) -> (.*)$/\1/p'
    f1=$(echo $l | sed -rn $reg)
    f1=${f1:1:${#f1}-2}
    reg='s/^(.*) -> (.*)$/\2/p'
    f2=$(echo $l | sed -rn $reg)
    f2=$(echo $f2 | sed -r 's/ \(backup: .*\)//')
    f2=${f2:1:${#f2}-2}
    [[ $f1 != /* ]] && f1="$PWD/$f1"
    echo "# \"$f1\" -> \"$f2\"" >> $fp
    echo "mv \"$f2\" \"$f1\"" >> $fp
    echo "echo \"\\033[1;33mmv \\\"$f2\\\" \\\"$f1\\\"\\033[0m\"" >> $fp
  done
}
function undo {
  local fp="${HOME}/.Trash/rm.undo"
  /bin/sh $fp
}
alias empty_trash='find ~/.Trash -mindepth 1 -delete -print'
# remove the following
## all mac .DS_store/.localized files in current directory recursively
function rm_mac_hidden_files {
  local clean_place=${*:-'.'}
  find $clean_place -name '*.DS_Store'  -type f -delete -print
  find $clean_place -name '*.localized' -type f -delete -print
}
## all python .py[co] files and __pycache__ dirs
alias rm_python_compiled_files="pyclean"
function rm_python_compiled_files_no_recursion {
  local clean_place=${*:-'.'}
  find $clean_place -maxdepth 1 -type f -name "*.py[co]" -delete
  find $clean_place -maxdepth 1 -type d -name "__pycache__" -delete
}
## all vim swap .sw[pon]
function rm_vim_swap_files {
  local clean_place=${*:-'.'}
  find $clean_place -name '*.sw[pon]'  -type f -delete -print
}
function rm_vim_swap_files_no_recursion {
  local clean_place=${*:-'.'}
  find $clean_place -maxdepth 1 -name '*.sw[pon]'  -type f -delete -print
}
##-------------------------------== history ==--------------------------------##
## show history with time, increase history size
## https://github.com/robbyrussell/oh-my-zsh/issues/739
## ./.oh-my-zsh/lib/history.zsh
## "mm/dd/yyyy":  -f
## "dd.mm.yyyy":  -E
## "yyyy-mm-dd":  -i
## HISTSIZE is the maximum number of lines that are kept in a session and
## SAVEHIST is the maximum number of lines that are kept in the history file.
alias history='fc -i -l 1'
# oh-my-zsh/plugins/history/history.plugin.zsh
function hs { history | grep $* }
alias hsi='hs -i'
##---------------------------== search and find ==----------------------------##
# grep: recursive, ln num, show file name, context
alias gg="grep -R -n -H -C5"
function ggs {
  grep -R -l $1 | xargs sed -i "s/$1/$2/g"
}
alias ggi="grep -R -n -H -C5 -i"
function ggsi {
  grep -R -l -i $1 | xargs sed -i "s/$1/$2/gi"
}
alias ggt="grep -R -n -H -C5 --include"
alias ggti="grep -R -n -H -C5 -i --include"
# find: search file/directory
alias sd='find . -type d -name'
alias sf='find . -type f -name'
alias sdi='find . -type d -iname'
alias sfi='find . -type f -iname'
##------------------------== pipes and redirection ==-------------------------##
# pipes
alias -g PH='| head'
alias -g PT='| tail'
alias -g PG='| grep'
alias -g PGI='| grep -i'
alias -g PL="| less"
alias -g PCL="--color=always | less"
alias -g PP="| pygmentize"
alias -g PC="| cat -A"
alias -g PF="| fpp"
alias -g PLL="2>&1 | less"
alias -g PCC="2>&1 | cat -A"
alias -g PPP="2>&1| pygmentize"
# redirection
alias -g RNE="2> /dev/null"
alias -g RALL="2>&1"
alias -g RNUL="> /dev/null 2>&1"
##---------------------------------== vim ==----------------------------------##
function vim_buffers {
  found=0
  curpwd=$(pwd)
  while [[ ! -a $(pwd)/buffers.list && $(pwd) != $(dirname $(pwd)) ]]; do
    cd $(dirname $(pwd))
  done
  if [[ -a $(pwd)/buffers.list ]]; then
    exe_path=$(pwd)/buffers.list
  else
    exe_path="${HOME}/.vim/buffers.list"
  fi
  cd ${curpwd}
  cyanecho $exe_path

  local dir="$(sed '2q;d' $exe_path)"
  cd $dir
  local -a filelist
  filelist=()
  for x in "${(f)$(sed '1,2d' $exe_path)}"; do
    local file="$(echo $x | sed 's/.*"\(.*\)".*/\1/')"
    file="${file/#\~/$HOME}"
    echo $file
    [[ -n $file ]] && { filelist+=($file); }
  done
  vim ${filelist[@]}
}
alias vimb='vim_buffers'
##---------------------------------== tex ==----------------------------------##
alias tm="${HOME}/misc/scripts/tex_make.sh make"
alias tp="${HOME}/misc/scripts/tex_make.sh preview"
alias tc="${HOME}/misc/scripts/tex_make.sh clean"

## ========================================================================== ##
#       _______.  ______ .______      __  .______   .___________.    _______.  #
#      /       | /      ||   _  \    |  | |   _  \  |           |   /       |  #
#     |   (----`|  ,----'|  |_)  |   |  | |  |_)  | `---|  |----`  |   (----`  #
#      \   \    |  |     |      /    |  | |   ___/      |  |        \   \      #
#  .----)   |   |  `----.|  |\  \----|  | |  |          |  |    .----)   |     #
#  |_______/     \______|| _| `._____|__| | _|          |__|    |_______/      #
#                    _______  _______   __  .___________.                      #
#                   |   ____||       \ |  | |           |                      #
#                   |  |__   |  .--.  ||  | `---|  |----`                      #
#                   |   __|  |  |  |  ||  |     |  |                           #
#                   |  |____ |  '--'  ||  |     |  |                           #
#                   |_______||_______/ |__|     |__|                           #
#              __    __  .______    _______       ___   .___________._______   #
#    ___      |  |  |  | |   _  \  |       \     /   \  |           |   ____|  #
#   ( _ )     |  |  |  | |  |_)  | |  .--.  |   /  ^  \ `---|  |----|  |__     #
#   / _ \/\   |  |  |  | |   ___/  |  |  |  |  /  /_\  \    |  |    |   __|    #
#  | (_>  <   |  `--'  | |  |      |  '--'  | /  _____  \   |  |    |  |____   #
#   \___/\/    \______/  | _|      |_______/ /__/     \__\  |__|    |_______|  #
## ========================================================================== ##
##-------------------------------== profiles ==-------------------------------##
function edit_then_source { vim $1; cyanecho "sourcing $1"; source $1; }
function ed_profile {
  local f1="${HOME}/misc/dotfiles/lib/.profile_wangxl"
  local f2="${HOME}/misc/dotfiles/lib/.profile_wangxl_darwin"
  local f3="${HOME}/misc/dotfiles/lib/.profile_wangxl_linux"
  vim $f1 $f2 $f3
  cyanecho "sourcing ~/.profile_wangxl"
  source ${HOME}/.profile_wangxl
}
function ed_profile_darwin {
  edit_then_source ${HOME}/misc/dotfiles/lib/.profile_wangxl_darwin
}
function ed_profile_linux {
  edit_then_source ${HOME}/misc/dotfiles/lib/.profile_wangxl_linux
}
function up_profile {
  cyanecho "sourcing ${HOME}/.profile_wangxl"
  source ${HOME}/.profile_wangxl
  cyanecho "sourcing ${HOME}/.tmux.conf"
  tmux source-file ${HOME}/.tmux.conf
}
##----------------------------== tmux conf, tmp ==----------------------------##
alias ed_tmux="vim ~/.tmux.conf; tmux source-file ~/.tmux.conf"
function init_tmux_tpm {
  if [[ ! -d ~/.tmux/plugins/tpm/.git ]] && \
     [[ ! -f ~/.tmux/plugins/tpm/.git ]]; then
    git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
    redecho "\n\tRead about tmux tpm configuration for tmp" \
         " at https://github.com/tmux-plugins/tpm\n"
    cyanecho "prefix + I : install new plugins"
    cyanecho "prefix + U : updates plugin(s)"
    cyanecho "prefix + alt + u : remove/uninstall plugins not on the list"
  fi
}
alias up_tmux_tpm="init_tmux_tpm; ~/.tmux/plugins/tpm/bin/install_plugins"
alias clean_tmux_tmp="init_tmux_tpm; ~/.tmux/plugins/tpm/bin/clean_plugins"
alias enter_tmux="tmux new -AD -s $(hostname -s)-main"
##-------------------------------== git:misc ==-------------------------------##
function ed_misc {
  local diff_cmd=" | vertical all | windo diffthis"
  local cmd1='args ~/misc/dotfiles/lib/.profile_wangxl | '
  cmd1+='bel split ~/misc/dotfiles/lib/.profile_wangxl_darwin | '
  cmd1+='bel vsplit ~/misc/dotfiles/lib/.profile_wangxl_linux | wincmd w'
  local cmd2='e ~/misc/dotfiles/lib/.tmux.conf'
  local cmd3='e ~/misc/dotfiles/lib/.vimrc |'
  cmd3+='bel vsplit ~/misc/dotfiles/lib/.vimrc.bundles'
  vim -c "$cmd1" -c "tabnew" \
      -c "$cmd2" -c "tabnew" \
      -c "$cmd3" -c "tabn1"
  cyanecho "sourcing ~/.profile_wangxl"
  source ${HOME}/.profile_wangxl
  cyanecho "sourcing ~/.tmux.conf"
  tmux source-file ${HOME}/.tmux.conf
}
function up_misc {
  pushd ${HOME}/misc > /dev/null
  if [[ -z $(git status --porcelain) ]]; then
    ggpur
  else
    xg_st
    redecho "There is uncommitted changes. Abort..."
  fi
  popd > /dev/null
}
function ed_scripts {
  local f1="${HOME}/misc/scripts/setup_symlinks.sh"
  local f2="${HOME}/misc/scripts/quick_install.sh"
  vim $f1 $f2
}
function up_symlinks {
  local opt=""
  [[ $(uname) == "Darwin" ]] && opt="mac"
  [[ $(uname) == "Linux" ]] && opt="timan"
  cyanecho "setup symlinks for $opt"
  ${HOME}/misc/scripts/setup_symlinks.sh $opt --no-confirm
}
##--------------------------------== vundle ==--------------------------------##
# oh-my-zsh/plugins/vundle/vundle.plugin.zsh
# https://github.com/VundleVim/Vundle.vim
function init_vundle {
  if [[ ! -d ~/.vim/bundle/Vundle.vim/.git ]] && \
     [[ ! -f ~/.vim/bundle/Vundle.vim/.git ]]; then
    git clone https://github.com/VundleVim/Vundle.vim.git \
      ~/.vim/bundle/Vundle.vim
    redecho "\n\tRead about vim configuration for vundle" \
         " at https://github.com/VundleVim/Vundle.vim\n"
  fi
}
alias up_vundle="init_vundle; vim +PluginInstall +qall"
alias update_vundle="init_vundle; vim +PluginInstall! +qall"
alias clean_vundle="init_vundle; vim +PluginClean! +qall"
alias cd_vundle="cd ~/.vim/bundle"
function build_vundle_ycm {
  if [[ $(uname) == "Darwin" ]]; then
    pushd . RNUL
    cd ~/.vim/bundle/YouCompleteMe
    ./install.py --clang-completer
    popd RNUL
  else
    pushd . RNUL
    local build_dir="${HOME}/.vim/ycm_build"
    mkdir $build_dir
    cd $build_dir
    LDFLAGS="-L/usr/local/lib -Wl,-rpath=/usr/local/lib" \
      cmake -G "Unix Makefiles" \
      -DEXTERNAL_LIBCLANG_PATH="${HOME}/llvm/build/lib/libclang.so" . \
      ~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp
    cmake --build . --target ycm_core --config Release
    popd RNUL
    /bin/rm -rf $build_dir
  fi
}
##------------------------------== oh-my-zsh ==-------------------------------##
function init_oh_my_zsh {
  if [[ ! -d ~/.oh-my-zsh/.git ]] && \
     [[ ! -f ~/.oh-my-zsh/.git ]]; then
    sh -c "$(curl -fsSL
    https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
    redecho "\n\tRead about oh-my-zsh" \
         " at https://github.com/robbyrussell/oh-my-zsh\n"
  fi
  if [[ ! -d ~/.oh-my-zsh/custom/plugins/zsh-completions/.git ]] && \
     [[ ! -f ~/.oh-my-zsh/custom/plugins/zsh-completions/.git ]]; then
    git clone https://github.com/zsh-users/zsh-completions \
      ~/.oh-my-zsh/custom/plugins/zsh-completions
    redecho "\n\tRead about zsh-completions" \
         " at https://github.com/zsh-users/zsh-completions\n"
  fi
  if [[ ! -d ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions/.git ]] && \
     [[ ! -f ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions/.git ]]; then
    git clone git://github.com/zsh-users/zsh-autosuggestions \
      ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions
    redecho "\n\tRead about zsh-autosuggestions" \
         " at https://github.com/zsh-users/zsh-autosuggestions\n"
  fi
}
function up_oh_my_zsh {
  init_oh_my_zsh
  upgrade_oh_my_zsh
  pushd ~/.oh-my-zsh/custom/plugins/zsh-completions RNUL
  git pull --rebase
  popd > /dev/null
  pushd ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions RNUL
  git pull --rebase
  popd > /dev/null
}
##---------== update homebrew, oh-my-zsh, pip and source profile==------------##
function update_scripts {
  redecho "upgrade oh-my-zsh"
  up_oh_my_zsh
  if [[ $(uname) == "Darwin" ]]; then
    redecho "brew update"
    brew update
    redecho "brew outdated"
    brew outdated
    redecho "brew upgrade"
    brew upgrade
    redecho "brew cask update"
    brew cask update
    redecho "brew cask cleanup"
    brew cask cleanup
    redecho "brew cleanup"
    brew cleanup
    redecho "pip install --upgrade pip"
    pip install --upgrade pip
    # yellowecho "pip update package"
    # pip freeze --local | grep -v '^\-e' | cut -d = -f 1  |\
    # xargs -n1 pip install -U
  fi
  redecho "vundle update"
  up_vundle
  redecho "vundle clean"
  clean_vundle
  redecho "tmux tpm update"
  up_tmux_tpm
  redecho "tmux tpm clean"
  clean_tmux_tmp
  redecho "source tmux conf"
  tmux source ${HOME}/.tmux.conf
  redecho "source profile_wangxl"
  source ${HOME}/.profile_wangxl
}

## ========================================================================== ##
#                     ________      _______. __    __                          #
#                    |       /     /       ||  |  |  |                         #
#                    `---/  /     |   (----`|  |__|  |                         #
#                       /  /       \   \    |   __   |                         #
#                      /  /----.----)   |   |  |  |  |                         #
#                     /________|_______/    |__|  |__|                         #
## ========================================================================== ##
if [[ $options[extended_glob] == off ]]; then setopt extended_glob; fi
# Enable hidden files completion
# https://github.com/robbyrussell/oh-my-zsh/pull/4489#issuecomment-196992974
_comp_options+=(globdots)

## ========================================================================== ##
#                      _______  __  .___________.                              #
#                     /  _____||  | |           |                              #
#                    |  |  __  |  | `---|  |----`                              #
#                    |  | |_ | |  |     |  |                                   #
#                    |  |__| | |  |     |  |                                   #
#                     \______| |__|     |__|                                   #
## ========================================================================== ##
function xg_sl {
  local option=""
  # by default, zsh does not split word
  # three ways to enable spliting safely
  # ${=a}
  # ${(@s: :)a} ## retain empty strings with @
  # eval "(${a})"
  if [[ $# -eq 0 ]]; then option="-10"; else eval "option=(${@})"; fi
  # replace -10 with --all
  # git --no-pager log $option --stat --branches --graph --decorate --all
  local format="" # commit, date, branches, subject, author
  format="%C(bold cyan)%h%Creset - %Cred%aD%Creset "
  format+="%C(bold green)(%ar)%C(reset) %C(auto)%d%Creset%n"
  format+=" %C(yellow)%s%Creset %C(bold white)by%Creset "
  format+="%C(bold blue)%an%Creset"
  git --no-pager log \
    --abbrev-commit --stat --stat-graph-width=60 --graph --decorate --all \
    --pretty=tformat:$format \
    $option
}
function xg_sll { # long
  # get remote unpulled changes
  git fetch
  local format="" # commit, date, branches, subject, author
  format="%C(bold cyan)%h%Creset - %Cred%aD%Creset "
  format+="%C(bold green)(%ar)%C(reset) %C(auto)%d%Creset%n"
  format+="%C(yellow)%s%Creset %C(bold white)by%Creset "
  format+="%C(bold blue)%an%Creset"
  format+="%C(auto)%+b%Creset"
  git log \
    --abbrev-commit --stat --stat-graph-width=60 --graph --decorate --all \
    --pretty=tformat:$format
}
function _xg_sls {
  local pager_option=""
  [[ $1 == "--no-pager" ]] && pager_option="--no-pager"
  local format=""
  format="%C(bold cyan)%h%Creset - %C(bold green)(%ar)%Creset " # commmit, date
  format+="%C(yellow)%s%Creset %C(bold white)by%Creset "        # subject
  format+="%C(bold blue)%an%Creset %C(auto)%d%Creset"           # author, decor
  git $pager_option log \
    --abbrev-commit --graph --decorate --all --pretty=tformat:$format "${@:2}"
}
function xg_sls { # short
  local option=""
  if [[ $# -eq 0 ]]; then option="-20"; else eval "option=(${@})"; fi
  _xg_sls --no-pager $option
}
function xg_slo { # outgoing
  git fetch
  _xg_sls --no-pager $@ origin/master..
}
function xg_sli { # incoming
  git fetch
  _xg_sls --no-pager $@ ..origin/master
}
function xg_slf { # show changes against file/directory, alternativ: gitk
  if [[ $# == 0 ]]; then
    _xg_sls --pager --full-diff -p
  else
    _xg_sls --pager -p $@
  fi
}
function xg_slf5 { # show changes against file/directory, last 5 changes only
  if [[ $# == 0 ]]; then
    _xg_sls --no-pager -5 --full-diff -p
  else
    _xg_sls --no-pager -5 -p $@
  fi
}
function xg_ls {  # list all file tracked under master
  git ls-tree -r --name-only ${@:-HEAD}
}
alias xg_ls_ignored="git ls-files --ignored --exclude-standard --others"
alias xg_ls_untracked="git ls-files --exclude-standard --others"
alias xg_st='git status'
alias xg_fetch_st='git fetch; git status;'
function xg_rm_last_commit {
  local ans=""
  redecho -n "Delete Last Commit [Y/N]? "
  read ans
  ans=$(echo ${ans} | tr "[:upper:]" "[:lower:]")
  if [[ $ans == yes || $ans == y ]]; then
    cyanecho "deleting..."
    git reset --hard "HEAD^"
  else
    cyanecho "do nothing, exit..."
  fi
}
alias xg_rk_last_commit='git reset --soft "HEAD^"'
alias xg_browse='hub browse'
alias xg_list_remote_repo_branch='git ls-remote origin'
alias xg_show_remote_repo='git remote show origin'
alias xg_dry_run_featch='git fetch --dry-run'
function xg_check_remote_up_2_date {
  if [[ -z $(git fetch --dry-run 3>&2 2>&1 1>&3) ]]
  then
    cyanecho "Git: up to date"
  else
    redecho "Git: need update"
  fi
}
alias xg_diff="git diff HEAD"
alias xg_ddiff='git diff "HEAD^"'
alias xg_ca="git commit -v -a --amend --no-edit"
function xg_clone {
  git clone git@github.com:$(git config github.user)/$1.git
}
function github_short_url {
  curl -isS https://git.io -F "url=$1" | sed -rn 's/^Location: (.*)$/\1/p'
}
function github_short_url_to_clipboard {
  local url="$(github_short_url $1)"
  echo $url | pbcopy
  echo $url
}
alias upld="${HOME}/misc/scripts/sync.sh"

## ========================================================================== ##
#             .______   .______      ___________    __    ____                 #
#             |   _  \  |   _  \    |   ____\   \  /  \  /   /                 #
#             |  |_)  | |  |_)  |   |  |__   \   \/    \/   /                  #
#             |   _  <  |      /    |   __|   \            /                   #
#             |  |_)  | |  |\  \----|  |____   \    /\    /                    #
#             |______/  | _| `._____|_______|   \__/  \__/                     #
## ========================================================================== ##
# homebrew api token
if [[ -f  ~/Dropbox/Tools/secrets/homebrew_github_api_token ]]; then
  export HOMEBREW_GITHUB_API_TOKEN=$(cat \
    ~/Dropbox/Tools/secrets/homebrew_github_api_token)
else
  redecho "cannot find file ~/Dropbox/Tools/secrets/homebrew_github_api_token"
  redecho "fix dropbox missing problem"
fi

## ========================================================================== ##
#                   .___  ___.  __       _______.  ______                      #
#                   |   \/   | |  |     /       | /      |                     #
#                   |  \  /  | |  |    |   (----`|  ,----'                     #
#                   |  |\/|  | |  |     \   \    |  |                          #
#                   |  |  |  | |  | .----)   |   |  `----.                     #
#                   |__|  |__| |__| |_______/     \______|                     #
## ========================================================================== ##
alias run_matlab="matlab -nodesktop -nosplash -r"

## ========================================================================== ##
#             ___________    ____  _______.___________._______ .___  ___.      #
#            /       \   \  /   / /       |           |   ____||   \/   |      #
#           |   (----`\   \/   / |   (----`---|  |----|  |__   |  \  /  |      #
#            \   \     \_    _/   \   \       |  |    |   __|  |  |\/|  |      #
#        .----)   |      |  | .----)   |      |  |    |  |____ |  |  |  |      #
#        |________..________| ________/ ______|___   _____________| ______     #
#         /       ||   _  \  |   ____| /      ||  | |   ____||  |  /      |    #
#        |   (----`|  |_)  | |  |__   |  ,----'|  | |  |__   |  | |  ,----'    #
#         \   \    |   ___/  |   __|  |  |     |  | |   __|  |  | |  |         #
#     .----)   |   |  |      |  |____ |  `----.|  | |  |     |  | |  `----.    #
#     |_______/    | _|      |_______| \______||__| |__|     |__|  \______|    #
## ========================================================================== ##
if [[ $(uname) == "Darwin" ]]; then
  source ${HOME}/misc/dotfiles/lib/.profile_wangxl_darwin
elif [[ $(uname) == "Linux" ]]; then
  source ${HOME}/misc/dotfiles/lib/.profile_wangxl_linux
fi
