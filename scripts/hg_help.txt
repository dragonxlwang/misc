hg and arc:

Dependent/Stacked Diffs
=======================
- arc detect-depends
  record dependencies between diffs in Phabicator
- hg amend --rebase
  amending stacked bottom diffs
- hg restack
  restack children left behind;
- hg rebase -s xxxxxx -d yyyyyy
  hg strip -r zzzzzz
  hg histedit / hg fold
- More tips: https://fburl.com/7fgmafh1 https://fburl.com/wiki/376ltrm8
- rebase options:
  -r: Exact match
  -s: Include descendants
  -b: Include entire subtree
- jf submit --stack
  jf submit -r bottom::top

Splitting a Large Diff
=====================
- hg split
  It will show you a ncurses interface, inside which you can use arrow and space
  keys to select which files, hunks or lines you want to commit. After
  selection, press C to make a commit. The resulting commit will become a direct
  ancestor of your current commit. Repeat the step until the splitting is done.

Modifying the Phabricator Message
=================================
- arc diff --edit
  Modify diff summary
- arc diff --verbatim
  Add revision message
- arc amend
  Amend the working copy, and synchronizing the local commit message from
  differential. (It also retrieves the diff number back if it was missing)

Repo sharing
============
hg-new-workdir <src> <dst>

Undo last hg action
===================
hg undo

Bad Arcrc
=========
- arc install-certificate
  install certificate: https://fburl.com/0nudtnlk

Link Commit to Diff
===================
jf link -d DXXXXXXX

Reviewer:
=========
- hg_authors [dir|current_directory]

chocjy, amalevich, kittipat, volkhin, ninghz, cxj

Show changes since last `arc diff`:
===================================
- hg diff --since-last-arc-diff

Show commit messages and details:
=================================
- hg log -v --rev .

journal:
========
hg journal                # shows previous locations of the working copy
hg journal <bookmark>     # shows previous locations of a bookmark
# hg reflog is a FB specific command for now

revert:
=======
hg revert <file>               # undoes a pending change
hg revert -r <hash> <file>     # changes the file to a previous commits version
hg revert --all                # undoes all pending changes
hg revert -i                   # interactive revert [experimental]

histedit:
=========
hg histedit <basecommit>       # edit history for commits between <base> and '.'
hg chistedit <basecommit>      # interactive interface for editing history

graft:
======
hg graft <hash>  # cherry-picks the given commit into the current bookmark/branch

purge:
======
hg purge       # delete all untracked files ('?' files in hg status) - git clean -df
hg purge --all # delete all untracked and ignored files - git clean -dfx

revisions:
==========
# hg help revisions
# See `hg help revset` for a full list of queries.
::X                # all ancestors of X
X::                # all descendants of X
X::Y               # commits between X and Y
X^                 # parent of X
only(X,Y)          # ancestors of X that are not ancestors of Y
draft()            # commits that aren't from the server (not yet pushed)
bookmark()         # all bookmarked commits

Mercurial guide for git users:
==============================
https://www.internalfb.com/intern/wiki/Mercurial-workflow/GuideForGitUsers/

interactive smartlog:
=====================
hg-sl-up / hsu

for-each-stacked:
=================
Use for-each-stacked to run a command on each commit in your stack. For
example, you can run linters or tests on each commit by running:

for-each-stacked arc lint
for-each-stacked arc unit
for-each-stacked buck test some/target/...
